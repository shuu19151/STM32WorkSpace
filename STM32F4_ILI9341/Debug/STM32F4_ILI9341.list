
STM32F4_ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000381c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c10  080039e0  080039e0  000139e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045f0  080045f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080045f0  080045f0  000145f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045f8  080045f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045f8  080045f8  000145f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045fc  080045fc  000145fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  0800460c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  0800460c  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c733  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002402  00000000  00000000  0002c7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae8  00000000  00000000  0002ebb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000859  00000000  00000000  0002f6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002173c  00000000  00000000  0002fef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f919  00000000  00000000  00051635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb20c  00000000  00000000  00060f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b50  00000000  00000000  0012c15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0012ecac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080039c8 	.word	0x080039c8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080039c8 	.word	0x080039c8

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b970 	b.w	800050c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	460d      	mov	r5, r1
 800024c:	4604      	mov	r4, r0
 800024e:	460f      	mov	r7, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4694      	mov	ip, r2
 8000258:	d965      	bls.n	8000326 <__udivmoddi4+0xe2>
 800025a:	fab2 f382 	clz	r3, r2
 800025e:	b143      	cbz	r3, 8000272 <__udivmoddi4+0x2e>
 8000260:	fa02 fc03 	lsl.w	ip, r2, r3
 8000264:	f1c3 0220 	rsb	r2, r3, #32
 8000268:	409f      	lsls	r7, r3
 800026a:	fa20 f202 	lsr.w	r2, r0, r2
 800026e:	4317      	orrs	r7, r2
 8000270:	409c      	lsls	r4, r3
 8000272:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000276:	fa1f f58c 	uxth.w	r5, ip
 800027a:	fbb7 f1fe 	udiv	r1, r7, lr
 800027e:	0c22      	lsrs	r2, r4, #16
 8000280:	fb0e 7711 	mls	r7, lr, r1, r7
 8000284:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000288:	fb01 f005 	mul.w	r0, r1, r5
 800028c:	4290      	cmp	r0, r2
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000290:	eb1c 0202 	adds.w	r2, ip, r2
 8000294:	f101 37ff 	add.w	r7, r1, #4294967295
 8000298:	f080 811c 	bcs.w	80004d4 <__udivmoddi4+0x290>
 800029c:	4290      	cmp	r0, r2
 800029e:	f240 8119 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002a2:	3902      	subs	r1, #2
 80002a4:	4462      	add	r2, ip
 80002a6:	1a12      	subs	r2, r2, r0
 80002a8:	b2a4      	uxth	r4, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b6:	fb00 f505 	mul.w	r5, r0, r5
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x90>
 80002be:	eb1c 0404 	adds.w	r4, ip, r4
 80002c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x294>
 80002ca:	42a5      	cmp	r5, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x294>
 80002d0:	4464      	add	r4, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d8:	1b64      	subs	r4, r4, r5
 80002da:	2100      	movs	r1, #0
 80002dc:	b11e      	cbz	r6, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40dc      	lsrs	r4, r3
 80002e0:	2300      	movs	r3, #0
 80002e2:	e9c6 4300 	strd	r4, r3, [r6]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0xbc>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80ed 	beq.w	80004ce <__udivmoddi4+0x28a>
 80002f4:	2100      	movs	r1, #0
 80002f6:	e9c6 0500 	strd	r0, r5, [r6]
 80002fa:	4608      	mov	r0, r1
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	fab3 f183 	clz	r1, r3
 8000304:	2900      	cmp	r1, #0
 8000306:	d149      	bne.n	800039c <__udivmoddi4+0x158>
 8000308:	42ab      	cmp	r3, r5
 800030a:	d302      	bcc.n	8000312 <__udivmoddi4+0xce>
 800030c:	4282      	cmp	r2, r0
 800030e:	f200 80f8 	bhi.w	8000502 <__udivmoddi4+0x2be>
 8000312:	1a84      	subs	r4, r0, r2
 8000314:	eb65 0203 	sbc.w	r2, r5, r3
 8000318:	2001      	movs	r0, #1
 800031a:	4617      	mov	r7, r2
 800031c:	2e00      	cmp	r6, #0
 800031e:	d0e2      	beq.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	e9c6 4700 	strd	r4, r7, [r6]
 8000324:	e7df      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000326:	b902      	cbnz	r2, 800032a <__udivmoddi4+0xe6>
 8000328:	deff      	udf	#255	; 0xff
 800032a:	fab2 f382 	clz	r3, r2
 800032e:	2b00      	cmp	r3, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x210>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f fe8c 	uxth.w	lr, ip
 800033e:	2101      	movs	r1, #1
 8000340:	fbb2 f5f7 	udiv	r5, r2, r7
 8000344:	fb07 2015 	mls	r0, r7, r5, r2
 8000348:	0c22      	lsrs	r2, r4, #16
 800034a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034e:	fb0e f005 	mul.w	r0, lr, r5
 8000352:	4290      	cmp	r0, r2
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x124>
 8000356:	eb1c 0202 	adds.w	r2, ip, r2
 800035a:	f105 38ff 	add.w	r8, r5, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4290      	cmp	r0, r2
 8000362:	f200 80cb 	bhi.w	80004fc <__udivmoddi4+0x2b8>
 8000366:	4645      	mov	r5, r8
 8000368:	1a12      	subs	r2, r2, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000370:	fb07 2210 	mls	r2, r7, r0, r2
 8000374:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000378:	fb0e fe00 	mul.w	lr, lr, r0
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x14e>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	d202      	bcs.n	8000390 <__udivmoddi4+0x14c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f200 80bb 	bhi.w	8000506 <__udivmoddi4+0x2c2>
 8000390:	4610      	mov	r0, r2
 8000392:	eba4 040e 	sub.w	r4, r4, lr
 8000396:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039a:	e79f      	b.n	80002dc <__udivmoddi4+0x98>
 800039c:	f1c1 0720 	rsb	r7, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003aa:	fa05 f401 	lsl.w	r4, r5, r1
 80003ae:	fa20 f307 	lsr.w	r3, r0, r7
 80003b2:	40fd      	lsrs	r5, r7
 80003b4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fbb5 f8f9 	udiv	r8, r5, r9
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	fb09 5518 	mls	r5, r9, r8, r5
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003cc:	fb08 f50e 	mul.w	r5, r8, lr
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	fa00 f001 	lsl.w	r0, r0, r1
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e4:	f080 8088 	bcs.w	80004f8 <__udivmoddi4+0x2b4>
 80003e8:	42a5      	cmp	r5, r4
 80003ea:	f240 8085 	bls.w	80004f8 <__udivmoddi4+0x2b4>
 80003ee:	f1a8 0802 	sub.w	r8, r8, #2
 80003f2:	4464      	add	r4, ip
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	b29d      	uxth	r5, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000404:	fb03 fe0e 	mul.w	lr, r3, lr
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f103 35ff 	add.w	r5, r3, #4294967295
 8000414:	d26c      	bcs.n	80004f0 <__udivmoddi4+0x2ac>
 8000416:	45a6      	cmp	lr, r4
 8000418:	d96a      	bls.n	80004f0 <__udivmoddi4+0x2ac>
 800041a:	3b02      	subs	r3, #2
 800041c:	4464      	add	r4, ip
 800041e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000422:	fba3 9502 	umull	r9, r5, r3, r2
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	42ac      	cmp	r4, r5
 800042c:	46c8      	mov	r8, r9
 800042e:	46ae      	mov	lr, r5
 8000430:	d356      	bcc.n	80004e0 <__udivmoddi4+0x29c>
 8000432:	d053      	beq.n	80004dc <__udivmoddi4+0x298>
 8000434:	b156      	cbz	r6, 800044c <__udivmoddi4+0x208>
 8000436:	ebb0 0208 	subs.w	r2, r0, r8
 800043a:	eb64 040e 	sbc.w	r4, r4, lr
 800043e:	fa04 f707 	lsl.w	r7, r4, r7
 8000442:	40ca      	lsrs	r2, r1
 8000444:	40cc      	lsrs	r4, r1
 8000446:	4317      	orrs	r7, r2
 8000448:	e9c6 7400 	strd	r7, r4, [r6]
 800044c:	4618      	mov	r0, r3
 800044e:	2100      	movs	r1, #0
 8000450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000454:	f1c3 0120 	rsb	r1, r3, #32
 8000458:	fa02 fc03 	lsl.w	ip, r2, r3
 800045c:	fa20 f201 	lsr.w	r2, r0, r1
 8000460:	fa25 f101 	lsr.w	r1, r5, r1
 8000464:	409d      	lsls	r5, r3
 8000466:	432a      	orrs	r2, r5
 8000468:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046c:	fa1f fe8c 	uxth.w	lr, ip
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1510 	mls	r5, r7, r0, r1
 8000478:	0c11      	lsrs	r1, r2, #16
 800047a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047e:	fb00 f50e 	mul.w	r5, r0, lr
 8000482:	428d      	cmp	r5, r1
 8000484:	fa04 f403 	lsl.w	r4, r4, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x258>
 800048a:	eb1c 0101 	adds.w	r1, ip, r1
 800048e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000492:	d22f      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 8000494:	428d      	cmp	r5, r1
 8000496:	d92d      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 8000498:	3802      	subs	r0, #2
 800049a:	4461      	add	r1, ip
 800049c:	1b49      	subs	r1, r1, r5
 800049e:	b292      	uxth	r2, r2
 80004a0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a4:	fb07 1115 	mls	r1, r7, r5, r1
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	fb05 f10e 	mul.w	r1, r5, lr
 80004b0:	4291      	cmp	r1, r2
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x282>
 80004b4:	eb1c 0202 	adds.w	r2, ip, r2
 80004b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004bc:	d216      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 80004be:	4291      	cmp	r1, r2
 80004c0:	d914      	bls.n	80004ec <__udivmoddi4+0x2a8>
 80004c2:	3d02      	subs	r5, #2
 80004c4:	4462      	add	r2, ip
 80004c6:	1a52      	subs	r2, r2, r1
 80004c8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004cc:	e738      	b.n	8000340 <__udivmoddi4+0xfc>
 80004ce:	4631      	mov	r1, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xa2>
 80004d4:	4639      	mov	r1, r7
 80004d6:	e6e6      	b.n	80002a6 <__udivmoddi4+0x62>
 80004d8:	4610      	mov	r0, r2
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x90>
 80004dc:	4548      	cmp	r0, r9
 80004de:	d2a9      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004e0:	ebb9 0802 	subs.w	r8, r9, r2
 80004e4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e8:	3b01      	subs	r3, #1
 80004ea:	e7a3      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ec:	4645      	mov	r5, r8
 80004ee:	e7ea      	b.n	80004c6 <__udivmoddi4+0x282>
 80004f0:	462b      	mov	r3, r5
 80004f2:	e794      	b.n	800041e <__udivmoddi4+0x1da>
 80004f4:	4640      	mov	r0, r8
 80004f6:	e7d1      	b.n	800049c <__udivmoddi4+0x258>
 80004f8:	46d0      	mov	r8, sl
 80004fa:	e77b      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fc:	3d02      	subs	r5, #2
 80004fe:	4462      	add	r2, ip
 8000500:	e732      	b.n	8000368 <__udivmoddi4+0x124>
 8000502:	4608      	mov	r0, r1
 8000504:	e70a      	b.n	800031c <__udivmoddi4+0xd8>
 8000506:	4464      	add	r4, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e742      	b.n	8000392 <__udivmoddi4+0x14e>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <MX_DMA_Init+0x3c>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a0b      	ldr	r2, [pc, #44]	; (800054c <MX_DMA_Init+0x3c>)
 8000520:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <MX_DMA_Init+0x3c>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	2100      	movs	r1, #0
 8000536:	203b      	movs	r0, #59	; 0x3b
 8000538:	f001 f83f 	bl	80015ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800053c:	203b      	movs	r0, #59	; 0x3b
 800053e:	f001 f858 	bl	80015f2 <HAL_NVIC_EnableIRQ>

}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40023800 	.word	0x40023800

08000550 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08a      	sub	sp, #40	; 0x28
 8000554:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]
 800056a:	4b41      	ldr	r3, [pc, #260]	; (8000670 <MX_GPIO_Init+0x120>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a40      	ldr	r2, [pc, #256]	; (8000670 <MX_GPIO_Init+0x120>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b3e      	ldr	r3, [pc, #248]	; (8000670 <MX_GPIO_Init+0x120>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0304 	and.w	r3, r3, #4
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	4b3a      	ldr	r3, [pc, #232]	; (8000670 <MX_GPIO_Init+0x120>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a39      	ldr	r2, [pc, #228]	; (8000670 <MX_GPIO_Init+0x120>)
 800058c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b37      	ldr	r3, [pc, #220]	; (8000670 <MX_GPIO_Init+0x120>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	4b33      	ldr	r3, [pc, #204]	; (8000670 <MX_GPIO_Init+0x120>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a32      	ldr	r2, [pc, #200]	; (8000670 <MX_GPIO_Init+0x120>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b30      	ldr	r3, [pc, #192]	; (8000670 <MX_GPIO_Init+0x120>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	4b2c      	ldr	r3, [pc, #176]	; (8000670 <MX_GPIO_Init+0x120>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a2b      	ldr	r2, [pc, #172]	; (8000670 <MX_GPIO_Init+0x120>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b29      	ldr	r3, [pc, #164]	; (8000670 <MX_GPIO_Init+0x120>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RESET_GPIO_Port, SPI1_RESET_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	4826      	ldr	r0, [pc, #152]	; (8000674 <MX_GPIO_Init+0x124>)
 80005dc:	f001 fd28 	bl	8002030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_DC_GPIO_Port, SPI1_DC_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e6:	4824      	ldr	r0, [pc, #144]	; (8000678 <MX_GPIO_Init+0x128>)
 80005e8:	f001 fd22 	bl	8002030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2140      	movs	r1, #64	; 0x40
 80005f0:	4822      	ldr	r0, [pc, #136]	; (800067c <MX_GPIO_Init+0x12c>)
 80005f2:	f001 fd1d 	bl	8002030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	4819      	ldr	r0, [pc, #100]	; (8000674 <MX_GPIO_Init+0x124>)
 800060e:	f001 fb7b 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_RESET_Pin;
 8000612:	2380      	movs	r3, #128	; 0x80
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_RESET_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	4812      	ldr	r0, [pc, #72]	; (8000674 <MX_GPIO_Init+0x124>)
 800062a:	f001 fb6d 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin;
 800062e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_DC_GPIO_Port, &GPIO_InitStruct);
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4619      	mov	r1, r3
 8000646:	480c      	ldr	r0, [pc, #48]	; (8000678 <MX_GPIO_Init+0x128>)
 8000648:	f001 fb5e 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800064c:	2340      	movs	r3, #64	; 0x40
 800064e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	2301      	movs	r3, #1
 8000652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2300      	movs	r3, #0
 800065a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4619      	mov	r1, r3
 8000662:	4806      	ldr	r0, [pc, #24]	; (800067c <MX_GPIO_Init+0x12c>)
 8000664:	f001 fb50 	bl	8001d08 <HAL_GPIO_Init>

}
 8000668:	bf00      	nop
 800066a:	3728      	adds	r7, #40	; 0x28
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40020800 	.word	0x40020800
 8000678:	40020000 	.word	0x40020000
 800067c:	40020400 	.word	0x40020400

08000680 <GraphicsInit>:

static int16_t triangleCornersX[3];
static int16_t triangleCornersY[3];

void GraphicsInit(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	ILI9341Reset();
 8000684:	f000 f962 	bl	800094c <ILI9341Reset>
	ILI9341Init();
 8000688:	f000 f976 	bl	8000978 <ILI9341Init>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}

08000690 <GraphicsClear>:

void GraphicsClear(colour_t colour)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af02      	add	r7, sp, #8
 8000696:	4603      	mov	r3, r0
 8000698:	80fb      	strh	r3, [r7, #6]
	filledRectangleClip(0U, 0U, (uint16_t)ILI9341_LCD_WIDTH, (uint16_t)ILI9341_LCD_HEIGHT, colour);
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80006a2:	22f0      	movs	r2, #240	; 0xf0
 80006a4:	2100      	movs	r1, #0
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f89a 	bl	80007e0 <filledRectangleClip>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <GraphicsLargeCharacter>:
		byte_pos++;
    }
}

void GraphicsLargeCharacter(int16_t x, int16_t y, char c, colour_t colour)
{
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4604      	mov	r4, r0
 80006bc:	4608      	mov	r0, r1
 80006be:	4611      	mov	r1, r2
 80006c0:	461a      	mov	r2, r3
 80006c2:	4623      	mov	r3, r4
 80006c4:	80fb      	strh	r3, [r7, #6]
 80006c6:	4603      	mov	r3, r0
 80006c8:	80bb      	strh	r3, [r7, #4]
 80006ca:	460b      	mov	r3, r1
 80006cc:	70fb      	strb	r3, [r7, #3]
 80006ce:	4613      	mov	r3, r2
 80006d0:	803b      	strh	r3, [r7, #0]
	int8_t charX;
	int8_t charY;
	uint8_t rowByte;
	uint8_t mask;
	uint16_t byte_pos = ((int16_t)c - (int16_t)' ') * GRAPHICS_LARGE_CHARACTER_HEIGHT * 2U;
 80006d2:	78fb      	ldrb	r3, [r7, #3]
 80006d4:	3b20      	subs	r3, #32
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	015b      	lsls	r3, r3, #5
 80006da:	817b      	strh	r3, [r7, #10]

   	for (charY = 0; charY < GRAPHICS_LARGE_CHARACTER_HEIGHT; charY++ )
 80006dc:	2300      	movs	r3, #0
 80006de:	73bb      	strb	r3, [r7, #14]
 80006e0:	e040      	b.n	8000764 <GraphicsLargeCharacter+0xb0>
    {
		mask = 0x80U;
 80006e2:	2380      	movs	r3, #128	; 0x80
 80006e4:	733b      	strb	r3, [r7, #12]
		rowByte = Font16_Table[byte_pos];
 80006e6:	897b      	ldrh	r3, [r7, #10]
 80006e8:	4a23      	ldr	r2, [pc, #140]	; (8000778 <GraphicsLargeCharacter+0xc4>)
 80006ea:	5cd3      	ldrb	r3, [r2, r3]
 80006ec:	737b      	strb	r3, [r7, #13]
		for (charX = 0; charX < GRAPHICS_LARGE_CHARACTER_WIDTH; charX++)
 80006ee:	2300      	movs	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]
 80006f2:	e02a      	b.n	800074a <GraphicsLargeCharacter+0x96>
		{
	   		if (rowByte & mask)
 80006f4:	7b7a      	ldrb	r2, [r7, #13]
 80006f6:	7b3b      	ldrb	r3, [r7, #12]
 80006f8:	4013      	ands	r3, r2
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d00f      	beq.n	8000720 <GraphicsLargeCharacter+0x6c>
	   		{
	   			ILI9341Pixel(x + (int16_t)charX, y + (int16_t)charY, colour);
 8000700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000704:	b29a      	uxth	r2, r3
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	4413      	add	r3, r2
 800070a:	b298      	uxth	r0, r3
 800070c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000710:	b29a      	uxth	r2, r3
 8000712:	88bb      	ldrh	r3, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	b29b      	uxth	r3, r3
 8000718:	883a      	ldrh	r2, [r7, #0]
 800071a:	4619      	mov	r1, r3
 800071c:	f000 fa92 	bl	8000c44 <ILI9341Pixel>
	   		}
	   		mask >>= 1;
 8000720:	7b3b      	ldrb	r3, [r7, #12]
 8000722:	085b      	lsrs	r3, r3, #1
 8000724:	733b      	strb	r3, [r7, #12]
	   		if (mask == 0U)
 8000726:	7b3b      	ldrb	r3, [r7, #12]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d108      	bne.n	800073e <GraphicsLargeCharacter+0x8a>
	   		{
	   			mask = 0x80U;
 800072c:	2380      	movs	r3, #128	; 0x80
 800072e:	733b      	strb	r3, [r7, #12]
	   			byte_pos++;
 8000730:	897b      	ldrh	r3, [r7, #10]
 8000732:	3301      	adds	r3, #1
 8000734:	817b      	strh	r3, [r7, #10]
	   			rowByte = Font16_Table[byte_pos];
 8000736:	897b      	ldrh	r3, [r7, #10]
 8000738:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <GraphicsLargeCharacter+0xc4>)
 800073a:	5cd3      	ldrb	r3, [r2, r3]
 800073c:	737b      	strb	r3, [r7, #13]
		for (charX = 0; charX < GRAPHICS_LARGE_CHARACTER_WIDTH; charX++)
 800073e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	3301      	adds	r3, #1
 8000746:	b2db      	uxtb	r3, r3
 8000748:	73fb      	strb	r3, [r7, #15]
 800074a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800074e:	2b0a      	cmp	r3, #10
 8000750:	ddd0      	ble.n	80006f4 <GraphicsLargeCharacter+0x40>
	   		}
		}
		byte_pos++;
 8000752:	897b      	ldrh	r3, [r7, #10]
 8000754:	3301      	adds	r3, #1
 8000756:	817b      	strh	r3, [r7, #10]
   	for (charY = 0; charY < GRAPHICS_LARGE_CHARACTER_HEIGHT; charY++ )
 8000758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	3301      	adds	r3, #1
 8000760:	b2db      	uxtb	r3, r3
 8000762:	73bb      	strb	r3, [r7, #14]
 8000764:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000768:	2b0f      	cmp	r3, #15
 800076a:	ddba      	ble.n	80006e2 <GraphicsLargeCharacter+0x2e>
    }
}
 800076c:	bf00      	nop
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bd90      	pop	{r4, r7, pc}
 8000776:	bf00      	nop
 8000778:	080039f0 	.word	0x080039f0

0800077c <GraphicsLargeString>:
		GraphicsStandardCharacter(x + (int16_t)c * (GRAPHICS_STANDARD_CHARACTER_WIDTH + 1), y, s[c], colour);
	}
}

void GraphicsLargeString(int16_t x, int16_t y, const char *s, colour_t colour)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60ba      	str	r2, [r7, #8]
 8000784:	461a      	mov	r2, r3
 8000786:	4603      	mov	r3, r0
 8000788:	81fb      	strh	r3, [r7, #14]
 800078a:	460b      	mov	r3, r1
 800078c:	81bb      	strh	r3, [r7, #12]
 800078e:	4613      	mov	r3, r2
 8000790:	80fb      	strh	r3, [r7, #6]
	size_t c;
	size_t length;

	length = strlen(s);
 8000792:	68b8      	ldr	r0, [r7, #8]
 8000794:	f7ff fd36 	bl	8000204 <strlen>
 8000798:	6138      	str	r0, [r7, #16]
	for (c = (size_t)0; c < length; c++)
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	e016      	b.n	80007ce <GraphicsLargeString+0x52>
	{
		GraphicsLargeCharacter(x + (int16_t)c * (GRAPHICS_LARGE_CHARACTER_WIDTH + 1), y, s[c], colour);
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	461a      	mov	r2, r3
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	4413      	add	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	89fb      	ldrh	r3, [r7, #14]
 80007b0:	4413      	add	r3, r2
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	b218      	sxth	r0, r3
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	4413      	add	r3, r2
 80007bc:	781a      	ldrb	r2, [r3, #0]
 80007be:	88fb      	ldrh	r3, [r7, #6]
 80007c0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80007c4:	f7ff ff76 	bl	80006b4 <GraphicsLargeCharacter>
	for (c = (size_t)0; c < length; c++)
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	3301      	adds	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d3e4      	bcc.n	80007a0 <GraphicsLargeString+0x24>
	}
}
 80007d6:	bf00      	nop
 80007d8:	bf00      	nop
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <filledRectangleClip>:
	GraphicsFilledSegment(x + (int16_t)cornerRadius, y + height - (int16_t)cornerRadius - 1, cornerRadius, 180, 270, 15U, colour);
	GraphicsFilledSegment(x + width - (int16_t)cornerRadius - 1, y + height - (int16_t)cornerRadius - 1, cornerRadius, 90, 180, 15U, colour);
}

static void filledRectangleClip(int16_t x, int16_t y, uint16_t width, uint16_t height, colour_t colour)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b087      	sub	sp, #28
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	4604      	mov	r4, r0
 80007e8:	4608      	mov	r0, r1
 80007ea:	4611      	mov	r1, r2
 80007ec:	461a      	mov	r2, r3
 80007ee:	4623      	mov	r3, r4
 80007f0:	80fb      	strh	r3, [r7, #6]
 80007f2:	4603      	mov	r3, r0
 80007f4:	80bb      	strh	r3, [r7, #4]
 80007f6:	460b      	mov	r3, r1
 80007f8:	807b      	strh	r3, [r7, #2]
 80007fa:	4613      	mov	r3, r2
 80007fc:	803b      	strh	r3, [r7, #0]
	int16_t x_end;
	int16_t y_end;

	if (x > (int16_t)ILI9341_LCD_WIDTH - 1 || y > (int16_t)ILI9341_LCD_HEIGHT - 1)
 80007fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000802:	2bef      	cmp	r3, #239	; 0xef
 8000804:	dc58      	bgt.n	80008b8 <filledRectangleClip+0xd8>
 8000806:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800080a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800080e:	da53      	bge.n	80008b8 <filledRectangleClip+0xd8>
	{
		return;
	}

	if (x + (int16_t)width < 0 || y + (int16_t)height < 0)
 8000810:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000814:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000818:	4413      	add	r3, r2
 800081a:	2b00      	cmp	r3, #0
 800081c:	db4e      	blt.n	80008bc <filledRectangleClip+0xdc>
 800081e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000822:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000826:	4413      	add	r3, r2
 8000828:	2b00      	cmp	r3, #0
 800082a:	db47      	blt.n	80008bc <filledRectangleClip+0xdc>
	{
		return;
	}

	if (x < 0)
 800082c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000830:	2b00      	cmp	r3, #0
 8000832:	da05      	bge.n	8000840 <filledRectangleClip+0x60>
	{
		width -= (uint16_t)-x;
 8000834:	88fa      	ldrh	r2, [r7, #6]
 8000836:	887b      	ldrh	r3, [r7, #2]
 8000838:	4413      	add	r3, r2
 800083a:	807b      	strh	r3, [r7, #2]
		x = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	80fb      	strh	r3, [r7, #6]
	}

	if (y < 0)
 8000840:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	da05      	bge.n	8000854 <filledRectangleClip+0x74>
	{
		height -= (uint16_t)-y;
 8000848:	88ba      	ldrh	r2, [r7, #4]
 800084a:	883b      	ldrh	r3, [r7, #0]
 800084c:	4413      	add	r3, r2
 800084e:	803b      	strh	r3, [r7, #0]
		y = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	80bb      	strh	r3, [r7, #4]
	}

	x_end = x + (int16_t)width - 1;
 8000854:	88fa      	ldrh	r2, [r7, #6]
 8000856:	887b      	ldrh	r3, [r7, #2]
 8000858:	4413      	add	r3, r2
 800085a:	b29b      	uxth	r3, r3
 800085c:	3b01      	subs	r3, #1
 800085e:	b29b      	uxth	r3, r3
 8000860:	81fb      	strh	r3, [r7, #14]
	if (x_end >(int16_t)ILI9341_LCD_WIDTH - 1)
 8000862:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000866:	2bef      	cmp	r3, #239	; 0xef
 8000868:	dd01      	ble.n	800086e <filledRectangleClip+0x8e>
	{
		x_end = (int16_t)ILI9341_LCD_WIDTH - 1;
 800086a:	23ef      	movs	r3, #239	; 0xef
 800086c:	81fb      	strh	r3, [r7, #14]
	}

	y_end = y + (int16_t)height - 1;
 800086e:	88ba      	ldrh	r2, [r7, #4]
 8000870:	883b      	ldrh	r3, [r7, #0]
 8000872:	4413      	add	r3, r2
 8000874:	b29b      	uxth	r3, r3
 8000876:	3b01      	subs	r3, #1
 8000878:	b29b      	uxth	r3, r3
 800087a:	81bb      	strh	r3, [r7, #12]
	if (y_end > (int16_t)ILI9341_LCD_HEIGHT - 1)
 800087c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000880:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000884:	db02      	blt.n	800088c <filledRectangleClip+0xac>
	{
		y_end = (int16_t)ILI9341_LCD_HEIGHT - 1;
 8000886:	f240 133f 	movw	r3, #319	; 0x13f
 800088a:	81bb      	strh	r3, [r7, #12]
	}

	// clipped sizes
	width = (uint16_t)(x_end - x + 1);
 800088c:	89fa      	ldrh	r2, [r7, #14]
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	b29b      	uxth	r3, r3
 8000894:	3301      	adds	r3, #1
 8000896:	807b      	strh	r3, [r7, #2]
	height = (uint16_t)(y_end - y + 1);
 8000898:	89ba      	ldrh	r2, [r7, #12]
 800089a:	88bb      	ldrh	r3, [r7, #4]
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	b29b      	uxth	r3, r3
 80008a0:	3301      	adds	r3, #1
 80008a2:	803b      	strh	r3, [r7, #0]

	ILI9341FilledRectangle((uint16_t)x, (uint16_t)y, width, height, colour);
 80008a4:	88f8      	ldrh	r0, [r7, #6]
 80008a6:	88b9      	ldrh	r1, [r7, #4]
 80008a8:	883c      	ldrh	r4, [r7, #0]
 80008aa:	887a      	ldrh	r2, [r7, #2]
 80008ac:	8c3b      	ldrh	r3, [r7, #32]
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	4623      	mov	r3, r4
 80008b2:	f000 f9ef 	bl	8000c94 <ILI9341FilledRectangle>
 80008b6:	e002      	b.n	80008be <filledRectangleClip+0xde>
		return;
 80008b8:	bf00      	nop
 80008ba:	e000      	b.n	80008be <filledRectangleClip+0xde>
		return;
 80008bc:	bf00      	nop
}
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd90      	pop	{r4, r7, pc}

080008c4 <WriteCommand>:
static void WaitForDMAWriteComplete(void);
static void WriteCommand(uint8_t command);
static void WriteData(uint8_t data);

static void WriteCommand(uint8_t command)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d4:	4806      	ldr	r0, [pc, #24]	; (80008f0 <WriteCommand+0x2c>)
 80008d6:	f001 fbab 	bl	8002030 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &command, 1U, 100U);
 80008da:	1df9      	adds	r1, r7, #7
 80008dc:	2364      	movs	r3, #100	; 0x64
 80008de:	2201      	movs	r2, #1
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <WriteCommand+0x30>)
 80008e2:	f002 fa30 	bl	8002d46 <HAL_SPI_Transmit>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40020000 	.word	0x40020000
 80008f4:	2000002c 	.word	0x2000002c

080008f8 <WriteData>:

static void WriteData(uint8_t data)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000908:	4806      	ldr	r0, [pc, #24]	; (8000924 <WriteData+0x2c>)
 800090a:	f001 fb91 	bl	8002030 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1U, 100U);
 800090e:	1df9      	adds	r1, r7, #7
 8000910:	2364      	movs	r3, #100	; 0x64
 8000912:	2201      	movs	r2, #1
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <WriteData+0x30>)
 8000916:	f002 fa16 	bl	8002d46 <HAL_SPI_Transmit>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40020000 	.word	0x40020000
 8000928:	2000002c 	.word	0x2000002c

0800092c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	txComplete = true;
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <HAL_SPI_TxCpltCallback+0x1c>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000028 	.word	0x20000028

0800094c <ILI9341Reset>:

void ILI9341Reset(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_RST_PORT, ILI9341_RST_PIN, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	2180      	movs	r1, #128	; 0x80
 8000954:	4807      	ldr	r0, [pc, #28]	; (8000974 <ILI9341Reset+0x28>)
 8000956:	f001 fb6b 	bl	8002030 <HAL_GPIO_WritePin>
	HAL_Delay(200UL);
 800095a:	20c8      	movs	r0, #200	; 0xc8
 800095c:	f000 fd2e 	bl	80013bc <HAL_Delay>
	HAL_GPIO_WritePin(ILI9341_RST_PORT, ILI9341_RST_PIN, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2180      	movs	r1, #128	; 0x80
 8000964:	4803      	ldr	r0, [pc, #12]	; (8000974 <ILI9341Reset+0x28>)
 8000966:	f001 fb63 	bl	8002030 <HAL_GPIO_WritePin>
	HAL_Delay(200UL);
 800096a:	20c8      	movs	r0, #200	; 0xc8
 800096c:	f000 fd26 	bl	80013bc <HAL_Delay>
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40020800 	.word	0x40020800

08000978 <ILI9341Init>:

void ILI9341Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	2140      	movs	r1, #64	; 0x40
 8000980:	4885      	ldr	r0, [pc, #532]	; (8000b98 <ILI9341Init+0x220>)
 8000982:	f001 fb55 	bl	8002030 <HAL_GPIO_WritePin>

	WriteCommand(0x01U);
 8000986:	2001      	movs	r0, #1
 8000988:	f7ff ff9c 	bl	80008c4 <WriteCommand>
	HAL_Delay(1000UL);
 800098c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000990:	f000 fd14 	bl	80013bc <HAL_Delay>
	WriteCommand(0xCBU);
 8000994:	20cb      	movs	r0, #203	; 0xcb
 8000996:	f7ff ff95 	bl	80008c4 <WriteCommand>
	WriteData(0x39U);
 800099a:	2039      	movs	r0, #57	; 0x39
 800099c:	f7ff ffac 	bl	80008f8 <WriteData>
	WriteData(0x2CU);
 80009a0:	202c      	movs	r0, #44	; 0x2c
 80009a2:	f7ff ffa9 	bl	80008f8 <WriteData>
	WriteData(0x00U);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff ffa6 	bl	80008f8 <WriteData>
	WriteData(0x34U);
 80009ac:	2034      	movs	r0, #52	; 0x34
 80009ae:	f7ff ffa3 	bl	80008f8 <WriteData>
	WriteData(0x02U);
 80009b2:	2002      	movs	r0, #2
 80009b4:	f7ff ffa0 	bl	80008f8 <WriteData>
	WriteCommand(0xCFU);
 80009b8:	20cf      	movs	r0, #207	; 0xcf
 80009ba:	f7ff ff83 	bl	80008c4 <WriteCommand>
	WriteData(0x00U);
 80009be:	2000      	movs	r0, #0
 80009c0:	f7ff ff9a 	bl	80008f8 <WriteData>
	WriteData(0xC1U);
 80009c4:	20c1      	movs	r0, #193	; 0xc1
 80009c6:	f7ff ff97 	bl	80008f8 <WriteData>
	WriteData(0x30U);
 80009ca:	2030      	movs	r0, #48	; 0x30
 80009cc:	f7ff ff94 	bl	80008f8 <WriteData>
	WriteCommand(0xE8U);
 80009d0:	20e8      	movs	r0, #232	; 0xe8
 80009d2:	f7ff ff77 	bl	80008c4 <WriteCommand>
	WriteData(0x85U);
 80009d6:	2085      	movs	r0, #133	; 0x85
 80009d8:	f7ff ff8e 	bl	80008f8 <WriteData>
	WriteData(0x00U);
 80009dc:	2000      	movs	r0, #0
 80009de:	f7ff ff8b 	bl	80008f8 <WriteData>
	WriteData(0x78U);
 80009e2:	2078      	movs	r0, #120	; 0x78
 80009e4:	f7ff ff88 	bl	80008f8 <WriteData>
	WriteCommand(0xEAU);
 80009e8:	20ea      	movs	r0, #234	; 0xea
 80009ea:	f7ff ff6b 	bl	80008c4 <WriteCommand>
	WriteData(0x00U);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff ff82 	bl	80008f8 <WriteData>
	WriteData(0x00U);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f7ff ff7f 	bl	80008f8 <WriteData>
	WriteCommand(0xEDU);
 80009fa:	20ed      	movs	r0, #237	; 0xed
 80009fc:	f7ff ff62 	bl	80008c4 <WriteCommand>
	WriteData(0x64U);
 8000a00:	2064      	movs	r0, #100	; 0x64
 8000a02:	f7ff ff79 	bl	80008f8 <WriteData>
	WriteData(0x03U);
 8000a06:	2003      	movs	r0, #3
 8000a08:	f7ff ff76 	bl	80008f8 <WriteData>
	WriteData(0x12U);
 8000a0c:	2012      	movs	r0, #18
 8000a0e:	f7ff ff73 	bl	80008f8 <WriteData>
	WriteData(0x81U);
 8000a12:	2081      	movs	r0, #129	; 0x81
 8000a14:	f7ff ff70 	bl	80008f8 <WriteData>
	WriteCommand(0xF7U);
 8000a18:	20f7      	movs	r0, #247	; 0xf7
 8000a1a:	f7ff ff53 	bl	80008c4 <WriteCommand>
	WriteData(0x20U);
 8000a1e:	2020      	movs	r0, #32
 8000a20:	f7ff ff6a 	bl	80008f8 <WriteData>
	WriteCommand(0xC0U);
 8000a24:	20c0      	movs	r0, #192	; 0xc0
 8000a26:	f7ff ff4d 	bl	80008c4 <WriteCommand>
	WriteData(0x23U);
 8000a2a:	2023      	movs	r0, #35	; 0x23
 8000a2c:	f7ff ff64 	bl	80008f8 <WriteData>
	WriteCommand(0xC1U);
 8000a30:	20c1      	movs	r0, #193	; 0xc1
 8000a32:	f7ff ff47 	bl	80008c4 <WriteCommand>
	WriteData(0x10U);
 8000a36:	2010      	movs	r0, #16
 8000a38:	f7ff ff5e 	bl	80008f8 <WriteData>
	WriteCommand(0xC5U);
 8000a3c:	20c5      	movs	r0, #197	; 0xc5
 8000a3e:	f7ff ff41 	bl	80008c4 <WriteCommand>
	WriteData(0x3EU);
 8000a42:	203e      	movs	r0, #62	; 0x3e
 8000a44:	f7ff ff58 	bl	80008f8 <WriteData>
	WriteData(0x28U);
 8000a48:	2028      	movs	r0, #40	; 0x28
 8000a4a:	f7ff ff55 	bl	80008f8 <WriteData>
	WriteCommand(0xC7U);
 8000a4e:	20c7      	movs	r0, #199	; 0xc7
 8000a50:	f7ff ff38 	bl	80008c4 <WriteCommand>
	WriteData(0x86U);
 8000a54:	2086      	movs	r0, #134	; 0x86
 8000a56:	f7ff ff4f 	bl	80008f8 <WriteData>
	WriteCommand(0x36U);
 8000a5a:	2036      	movs	r0, #54	; 0x36
 8000a5c:	f7ff ff32 	bl	80008c4 <WriteCommand>
	WriteData(0x48U);
 8000a60:	2048      	movs	r0, #72	; 0x48
 8000a62:	f7ff ff49 	bl	80008f8 <WriteData>
	WriteCommand(0x3AU);
 8000a66:	203a      	movs	r0, #58	; 0x3a
 8000a68:	f7ff ff2c 	bl	80008c4 <WriteCommand>
	WriteData(0x55U);
 8000a6c:	2055      	movs	r0, #85	; 0x55
 8000a6e:	f7ff ff43 	bl	80008f8 <WriteData>
	WriteCommand(0xB1U);
 8000a72:	20b1      	movs	r0, #177	; 0xb1
 8000a74:	f7ff ff26 	bl	80008c4 <WriteCommand>
	WriteData(0x00U);
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff ff3d 	bl	80008f8 <WriteData>
	WriteData(0x18U);
 8000a7e:	2018      	movs	r0, #24
 8000a80:	f7ff ff3a 	bl	80008f8 <WriteData>
	WriteCommand(0xB6U);
 8000a84:	20b6      	movs	r0, #182	; 0xb6
 8000a86:	f7ff ff1d 	bl	80008c4 <WriteCommand>
	WriteData(0x08U);
 8000a8a:	2008      	movs	r0, #8
 8000a8c:	f7ff ff34 	bl	80008f8 <WriteData>
	WriteData(0x82U);
 8000a90:	2082      	movs	r0, #130	; 0x82
 8000a92:	f7ff ff31 	bl	80008f8 <WriteData>
	WriteData(0x27U);
 8000a96:	2027      	movs	r0, #39	; 0x27
 8000a98:	f7ff ff2e 	bl	80008f8 <WriteData>
	WriteCommand(0xF2U);
 8000a9c:	20f2      	movs	r0, #242	; 0xf2
 8000a9e:	f7ff ff11 	bl	80008c4 <WriteCommand>
	WriteData(0x00U);
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f7ff ff28 	bl	80008f8 <WriteData>
	WriteCommand(0x26U);
 8000aa8:	2026      	movs	r0, #38	; 0x26
 8000aaa:	f7ff ff0b 	bl	80008c4 <WriteCommand>
	WriteData(0x01U);
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f7ff ff22 	bl	80008f8 <WriteData>
	WriteCommand(0xE0U);
 8000ab4:	20e0      	movs	r0, #224	; 0xe0
 8000ab6:	f7ff ff05 	bl	80008c4 <WriteCommand>
	WriteData(0x0FU);
 8000aba:	200f      	movs	r0, #15
 8000abc:	f7ff ff1c 	bl	80008f8 <WriteData>
	WriteData(0x31U);
 8000ac0:	2031      	movs	r0, #49	; 0x31
 8000ac2:	f7ff ff19 	bl	80008f8 <WriteData>
	WriteData(0x2BU);
 8000ac6:	202b      	movs	r0, #43	; 0x2b
 8000ac8:	f7ff ff16 	bl	80008f8 <WriteData>
	WriteData(0x0CU);
 8000acc:	200c      	movs	r0, #12
 8000ace:	f7ff ff13 	bl	80008f8 <WriteData>
	WriteData(0x0EU);
 8000ad2:	200e      	movs	r0, #14
 8000ad4:	f7ff ff10 	bl	80008f8 <WriteData>
	WriteData(0x08U);
 8000ad8:	2008      	movs	r0, #8
 8000ada:	f7ff ff0d 	bl	80008f8 <WriteData>
	WriteData(0x4EU);
 8000ade:	204e      	movs	r0, #78	; 0x4e
 8000ae0:	f7ff ff0a 	bl	80008f8 <WriteData>
	WriteData(0xF1U);
 8000ae4:	20f1      	movs	r0, #241	; 0xf1
 8000ae6:	f7ff ff07 	bl	80008f8 <WriteData>
	WriteData(0x37U);
 8000aea:	2037      	movs	r0, #55	; 0x37
 8000aec:	f7ff ff04 	bl	80008f8 <WriteData>
	WriteData(0x07U);
 8000af0:	2007      	movs	r0, #7
 8000af2:	f7ff ff01 	bl	80008f8 <WriteData>
	WriteData(0x10U);
 8000af6:	2010      	movs	r0, #16
 8000af8:	f7ff fefe 	bl	80008f8 <WriteData>
	WriteData(0x03U);
 8000afc:	2003      	movs	r0, #3
 8000afe:	f7ff fefb 	bl	80008f8 <WriteData>
	WriteData(0x0EU);
 8000b02:	200e      	movs	r0, #14
 8000b04:	f7ff fef8 	bl	80008f8 <WriteData>
	WriteData(0x09U);
 8000b08:	2009      	movs	r0, #9
 8000b0a:	f7ff fef5 	bl	80008f8 <WriteData>
	WriteData(0x00U);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f7ff fef2 	bl	80008f8 <WriteData>
	WriteCommand(0xE1U);
 8000b14:	20e1      	movs	r0, #225	; 0xe1
 8000b16:	f7ff fed5 	bl	80008c4 <WriteCommand>
	WriteData(0x00U);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff feec 	bl	80008f8 <WriteData>
	WriteData(0x0EU);
 8000b20:	200e      	movs	r0, #14
 8000b22:	f7ff fee9 	bl	80008f8 <WriteData>
	WriteData(0x14U);
 8000b26:	2014      	movs	r0, #20
 8000b28:	f7ff fee6 	bl	80008f8 <WriteData>
	WriteData(0x03U);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f7ff fee3 	bl	80008f8 <WriteData>
	WriteData(0x11U);
 8000b32:	2011      	movs	r0, #17
 8000b34:	f7ff fee0 	bl	80008f8 <WriteData>
	WriteData(0x07U);
 8000b38:	2007      	movs	r0, #7
 8000b3a:	f7ff fedd 	bl	80008f8 <WriteData>
	WriteData(0x31U);
 8000b3e:	2031      	movs	r0, #49	; 0x31
 8000b40:	f7ff feda 	bl	80008f8 <WriteData>
	WriteData(0xC1U);
 8000b44:	20c1      	movs	r0, #193	; 0xc1
 8000b46:	f7ff fed7 	bl	80008f8 <WriteData>
	WriteData(0x48U);
 8000b4a:	2048      	movs	r0, #72	; 0x48
 8000b4c:	f7ff fed4 	bl	80008f8 <WriteData>
	WriteData(0x08U);
 8000b50:	2008      	movs	r0, #8
 8000b52:	f7ff fed1 	bl	80008f8 <WriteData>
	WriteData(0x0FU);
 8000b56:	200f      	movs	r0, #15
 8000b58:	f7ff fece 	bl	80008f8 <WriteData>
	WriteData(0x0CU);
 8000b5c:	200c      	movs	r0, #12
 8000b5e:	f7ff fecb 	bl	80008f8 <WriteData>
	WriteData(0x31U);
 8000b62:	2031      	movs	r0, #49	; 0x31
 8000b64:	f7ff fec8 	bl	80008f8 <WriteData>
	WriteData(0x36U);
 8000b68:	2036      	movs	r0, #54	; 0x36
 8000b6a:	f7ff fec5 	bl	80008f8 <WriteData>
	WriteData(0x0FU);
 8000b6e:	200f      	movs	r0, #15
 8000b70:	f7ff fec2 	bl	80008f8 <WriteData>
	WriteCommand(0x11U);
 8000b74:	2011      	movs	r0, #17
 8000b76:	f7ff fea5 	bl	80008c4 <WriteCommand>
	HAL_Delay(120UL);
 8000b7a:	2078      	movs	r0, #120	; 0x78
 8000b7c:	f000 fc1e 	bl	80013bc <HAL_Delay>
	WriteCommand(0x29U);
 8000b80:	2029      	movs	r0, #41	; 0x29
 8000b82:	f7ff fe9f 	bl	80008c4 <WriteCommand>
	WriteCommand(0x36U);
 8000b86:	2036      	movs	r0, #54	; 0x36
 8000b88:	f7ff fe9c 	bl	80008c4 <WriteCommand>
	WriteData(0x48U);
 8000b8c:	2048      	movs	r0, #72	; 0x48
 8000b8e:	f7ff feb3 	bl	80008f8 <WriteData>
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40020400 	.word	0x40020400

08000b9c <SetWindow>:

static void SetWindow(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	4608      	mov	r0, r1
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4623      	mov	r3, r4
 8000bac:	80fb      	strh	r3, [r7, #6]
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80bb      	strh	r3, [r7, #4]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	807b      	strh	r3, [r7, #2]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	803b      	strh	r3, [r7, #0]
	WriteCommand(0x2AU);
 8000bba:	202a      	movs	r0, #42	; 0x2a
 8000bbc:	f7ff fe82 	bl	80008c4 <WriteCommand>
	WriteData(xStart >> 8);
 8000bc0:	88fb      	ldrh	r3, [r7, #6]
 8000bc2:	0a1b      	lsrs	r3, r3, #8
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fe95 	bl	80008f8 <WriteData>
	WriteData(xStart);
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fe90 	bl	80008f8 <WriteData>
	WriteData(xEnd >> 8);
 8000bd8:	887b      	ldrh	r3, [r7, #2]
 8000bda:	0a1b      	lsrs	r3, r3, #8
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fe89 	bl	80008f8 <WriteData>
	WriteData(xEnd);
 8000be6:	887b      	ldrh	r3, [r7, #2]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fe84 	bl	80008f8 <WriteData>

	WriteCommand(0x2BU);
 8000bf0:	202b      	movs	r0, #43	; 0x2b
 8000bf2:	f7ff fe67 	bl	80008c4 <WriteCommand>
	WriteData(yStart >> 8);
 8000bf6:	88bb      	ldrh	r3, [r7, #4]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fe7a 	bl	80008f8 <WriteData>
	WriteData(yStart);
 8000c04:	88bb      	ldrh	r3, [r7, #4]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fe75 	bl	80008f8 <WriteData>
	WriteData(yEnd >> 8);
 8000c0e:	883b      	ldrh	r3, [r7, #0]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fe6e 	bl	80008f8 <WriteData>
	WriteData(yEnd);
 8000c1c:	883b      	ldrh	r3, [r7, #0]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fe69 	bl	80008f8 <WriteData>

	WriteCommand(0x2CU);
 8000c26:	202c      	movs	r0, #44	; 0x2c
 8000c28:	f7ff fe4c 	bl	80008c4 <WriteCommand>

	HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c32:	4803      	ldr	r0, [pc, #12]	; (8000c40 <SetWindow+0xa4>)
 8000c34:	f001 f9fc 	bl	8002030 <HAL_GPIO_WritePin>
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd90      	pop	{r4, r7, pc}
 8000c40:	40020000 	.word	0x40020000

08000c44 <ILI9341Pixel>:

void ILI9341Pixel(uint16_t x, uint16_t y, colour_t colour)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	80fb      	strh	r3, [r7, #6]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	80bb      	strh	r3, [r7, #4]
 8000c52:	4613      	mov	r3, r2
 8000c54:	807b      	strh	r3, [r7, #2]
	colour_t beColour = __builtin_bswap16(colour);
 8000c56:	887b      	ldrh	r3, [r7, #2]
 8000c58:	ba5b      	rev16	r3, r3
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	81fb      	strh	r3, [r7, #14]

	if (x >= ILI9341_LCD_WIDTH || y >= ILI9341_LCD_HEIGHT)
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	2bef      	cmp	r3, #239	; 0xef
 8000c62:	d811      	bhi.n	8000c88 <ILI9341Pixel+0x44>
 8000c64:	88bb      	ldrh	r3, [r7, #4]
 8000c66:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000c6a:	d20d      	bcs.n	8000c88 <ILI9341Pixel+0x44>
	{
		return;
	}

	SetWindow(x, y, x, y);
 8000c6c:	88bb      	ldrh	r3, [r7, #4]
 8000c6e:	88fa      	ldrh	r2, [r7, #6]
 8000c70:	88b9      	ldrh	r1, [r7, #4]
 8000c72:	88f8      	ldrh	r0, [r7, #6]
 8000c74:	f7ff ff92 	bl	8000b9c <SetWindow>

	HAL_SPI_Transmit(&hspi1, (uint8_t *)&beColour, 2U, 100UL);
 8000c78:	f107 010e 	add.w	r1, r7, #14
 8000c7c:	2364      	movs	r3, #100	; 0x64
 8000c7e:	2202      	movs	r2, #2
 8000c80:	4803      	ldr	r0, [pc, #12]	; (8000c90 <ILI9341Pixel+0x4c>)
 8000c82:	f002 f860 	bl	8002d46 <HAL_SPI_Transmit>
 8000c86:	e000      	b.n	8000c8a <ILI9341Pixel+0x46>
		return;
 8000c88:	bf00      	nop
}
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	2000002c 	.word	0x2000002c

08000c94 <ILI9341FilledRectangle>:
		WaitForDMAWriteComplete();
	}
}

void ILI9341FilledRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, colour_t colour)
{
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b0a7      	sub	sp, #156	; 0x9c
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4623      	mov	r3, r4
 8000ca4:	80fb      	strh	r3, [r7, #6]
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	80bb      	strh	r3, [r7, #4]
 8000caa:	460b      	mov	r3, r1
 8000cac:	807b      	strh	r3, [r7, #2]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	803b      	strh	r3, [r7, #0]
	colour_t dmaBuffer[DMA_BUFFER_SIZE];
	uint8_t i;
	uint32_t totalBytesToWrite;
	uint32_t bytesToWriteThisTime;

	for (i = 0U; i < DMA_BUFFER_SIZE; i++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000cb8:	e00f      	b.n	8000cda <ILI9341FilledRectangle+0x46>
	{
		dmaBuffer[i] = __builtin_bswap16(colour);
 8000cba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000cbe:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8000cc2:	ba52      	rev16	r2, r2
 8000cc4:	b292      	uxth	r2, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	3398      	adds	r3, #152	; 0x98
 8000cca:	443b      	add	r3, r7
 8000ccc:	f823 2c8c 	strh.w	r2, [r3, #-140]
	for (i = 0U; i < DMA_BUFFER_SIZE; i++)
 8000cd0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000cda:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000cde:	2b3f      	cmp	r3, #63	; 0x3f
 8000ce0:	d9eb      	bls.n	8000cba <ILI9341FilledRectangle+0x26>
	}

	SetWindow(x, y, x + width - 1U, y + height - 1U);
 8000ce2:	88fa      	ldrh	r2, [r7, #6]
 8000ce4:	887b      	ldrh	r3, [r7, #2]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	3b01      	subs	r3, #1
 8000cec:	b29c      	uxth	r4, r3
 8000cee:	88ba      	ldrh	r2, [r7, #4]
 8000cf0:	883b      	ldrh	r3, [r7, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	88b9      	ldrh	r1, [r7, #4]
 8000cfc:	88f8      	ldrh	r0, [r7, #6]
 8000cfe:	4622      	mov	r2, r4
 8000d00:	f7ff ff4c 	bl	8000b9c <SetWindow>
	totalBytesToWrite = (uint32_t)width * (uint32_t)height * (uint32_t)sizeof(colour_t);
 8000d04:	887b      	ldrh	r3, [r7, #2]
 8000d06:	883a      	ldrh	r2, [r7, #0]
 8000d08:	fb02 f303 	mul.w	r3, r2, r3
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	bytesToWriteThisTime = DMA_BUFFER_SIZE * (uint16_t)sizeof(colour_t);
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	while (totalBytesToWrite > 0UL)
 8000d18:	e01b      	b.n	8000d52 <ILI9341FilledRectangle+0xbe>
	{
		if (totalBytesToWrite < bytesToWriteThisTime)
 8000d1a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d203      	bcs.n	8000d2e <ILI9341FilledRectangle+0x9a>
		{
			bytesToWriteThisTime = totalBytesToWrite;
 8000d26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		}
		totalBytesToWrite -= bytesToWriteThisTime;
 8000d2e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

		WriteDataDMA(&dmaBuffer, bytesToWriteThisTime);
 8000d3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 f80b 	bl	8000d64 <WriteDataDMA>
		WaitForDMAWriteComplete();
 8000d4e:	f000 f821 	bl	8000d94 <WaitForDMAWriteComplete>
	while (totalBytesToWrite > 0UL)
 8000d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1df      	bne.n	8000d1a <ILI9341FilledRectangle+0x86>
	}
}
 8000d5a:	bf00      	nop
 8000d5c:	bf00      	nop
 8000d5e:	379c      	adds	r7, #156	; 0x9c
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd90      	pop	{r4, r7, pc}

08000d64 <WriteDataDMA>:

static void WriteDataDMA(const void *data, uint16_t length)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	807b      	strh	r3, [r7, #2]
	txComplete = false;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <WriteDataDMA+0x28>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)data, length);
 8000d76:	887b      	ldrh	r3, [r7, #2]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	4804      	ldr	r0, [pc, #16]	; (8000d90 <WriteDataDMA+0x2c>)
 8000d7e:	f002 f91f 	bl	8002fc0 <HAL_SPI_Transmit_DMA>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000028 	.word	0x20000028
 8000d90:	2000002c 	.word	0x2000002c

08000d94 <WaitForDMAWriteComplete>:

static void WaitForDMAWriteComplete(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
	while (txComplete == false)
 8000d98:	bf00      	nop
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <WaitForDMAWriteComplete+0x24>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	f083 0301 	eor.w	r3, r3, #1
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f7      	bne.n	8000d9a <WaitForDMAWriteComplete+0x6>
	{
	}
}
 8000daa:	bf00      	nop
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000028 	.word	0x20000028

08000dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc0:	f000 fa8a 	bl	80012d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc4:	f000 f85a 	bl	8000e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc8:	f7ff fbc2 	bl	8000550 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dcc:	f7ff fba0 	bl	8000510 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000dd0:	f000 f9e6 	bl	80011a0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000dd4:	f000 f8c6 	bl	8000f64 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  GraphicsInit();
 8000dd8:	f7ff fc52 	bl	8000680 <GraphicsInit>
//  TouchCalibrate();
  GraphicsClear(WHITE);
 8000ddc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000de0:	f7ff fc56 	bl	8000690 <GraphicsClear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GraphicsLargeCharacter(0, 150, 'L', BLACK);
 8000de4:	2300      	movs	r3, #0
 8000de6:	224c      	movs	r2, #76	; 0x4c
 8000de8:	2196      	movs	r1, #150	; 0x96
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff fc62 	bl	80006b4 <GraphicsLargeCharacter>
	  GraphicsLargeCharacter(10, 150, 'a', BLACK);
 8000df0:	2300      	movs	r3, #0
 8000df2:	2261      	movs	r2, #97	; 0x61
 8000df4:	2196      	movs	r1, #150	; 0x96
 8000df6:	200a      	movs	r0, #10
 8000df8:	f7ff fc5c 	bl	80006b4 <GraphicsLargeCharacter>
	  GraphicsLargeCharacter(20, 150, 'm', BLACK);
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	226d      	movs	r2, #109	; 0x6d
 8000e00:	2196      	movs	r1, #150	; 0x96
 8000e02:	2014      	movs	r0, #20
 8000e04:	f7ff fc56 	bl	80006b4 <GraphicsLargeCharacter>
	  GraphicsLargeCharacter(30, 150, 'Q', BLACK);
 8000e08:	2300      	movs	r3, #0
 8000e0a:	2251      	movs	r2, #81	; 0x51
 8000e0c:	2196      	movs	r1, #150	; 0x96
 8000e0e:	201e      	movs	r0, #30
 8000e10:	f7ff fc50 	bl	80006b4 <GraphicsLargeCharacter>
	  GraphicsLargeCharacter(40, 150, 'u', BLACK);
 8000e14:	2300      	movs	r3, #0
 8000e16:	2275      	movs	r2, #117	; 0x75
 8000e18:	2196      	movs	r1, #150	; 0x96
 8000e1a:	2028      	movs	r0, #40	; 0x28
 8000e1c:	f7ff fc4a 	bl	80006b4 <GraphicsLargeCharacter>
	  GraphicsLargeCharacter(50, 150, 'a', BLACK);
 8000e20:	2300      	movs	r3, #0
 8000e22:	2261      	movs	r2, #97	; 0x61
 8000e24:	2196      	movs	r1, #150	; 0x96
 8000e26:	2032      	movs	r0, #50	; 0x32
 8000e28:	f7ff fc44 	bl	80006b4 <GraphicsLargeCharacter>
	  GraphicsLargeCharacter(60, 150, 'n', BLACK);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	226e      	movs	r2, #110	; 0x6e
 8000e30:	2196      	movs	r1, #150	; 0x96
 8000e32:	203c      	movs	r0, #60	; 0x3c
 8000e34:	f7ff fc3e 	bl	80006b4 <GraphicsLargeCharacter>
	  GraphicsLargeCharacter(70, 150, 'g', BLACK);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	2267      	movs	r2, #103	; 0x67
 8000e3c:	2196      	movs	r1, #150	; 0x96
 8000e3e:	2046      	movs	r0, #70	; 0x46
 8000e40:	f7ff fc38 	bl	80006b4 <GraphicsLargeCharacter>
	  GraphicsLargeCharacter(80, 150, 'T', BLACK);
 8000e44:	2300      	movs	r3, #0
 8000e46:	2254      	movs	r2, #84	; 0x54
 8000e48:	2196      	movs	r1, #150	; 0x96
 8000e4a:	2050      	movs	r0, #80	; 0x50
 8000e4c:	f7ff fc32 	bl	80006b4 <GraphicsLargeCharacter>
	  GraphicsLargeCharacter(90, 150, 'r', BLACK);
 8000e50:	2300      	movs	r3, #0
 8000e52:	2272      	movs	r2, #114	; 0x72
 8000e54:	2196      	movs	r1, #150	; 0x96
 8000e56:	205a      	movs	r0, #90	; 0x5a
 8000e58:	f7ff fc2c 	bl	80006b4 <GraphicsLargeCharacter>
	  GraphicsLargeCharacter(100, 150, 'i', BLACK);
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	2269      	movs	r2, #105	; 0x69
 8000e60:	2196      	movs	r1, #150	; 0x96
 8000e62:	2064      	movs	r0, #100	; 0x64
 8000e64:	f7ff fc26 	bl	80006b4 <GraphicsLargeCharacter>
	  GraphicsLargeString(0, 100, "Lam Quang Tri", BLACK);
 8000e68:	2300      	movs	r3, #0
 8000e6a:	4a03      	ldr	r2, [pc, #12]	; (8000e78 <main+0xbc>)
 8000e6c:	2164      	movs	r1, #100	; 0x64
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f7ff fc84 	bl	800077c <GraphicsLargeString>
	  GraphicsLargeCharacter(0, 150, 'L', BLACK);
 8000e74:	e7b6      	b.n	8000de4 <main+0x28>
 8000e76:	bf00      	nop
 8000e78:	080039e0 	.word	0x080039e0

08000e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b094      	sub	sp, #80	; 0x50
 8000e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	2234      	movs	r2, #52	; 0x34
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f002 fd70 	bl	8003970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <SystemClock_Config+0xd4>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	4a29      	ldr	r2, [pc, #164]	; (8000f50 <SystemClock_Config+0xd4>)
 8000eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eae:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb0:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <SystemClock_Config+0xd4>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <SystemClock_Config+0xd8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ec8:	4a22      	ldr	r2, [pc, #136]	; (8000f54 <SystemClock_Config+0xd8>)
 8000eca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <SystemClock_Config+0xd8>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000edc:	2302      	movs	r3, #2
 8000ede:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee4:	2310      	movs	r3, #16
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eec:	2300      	movs	r3, #0
 8000eee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ef0:	2310      	movs	r3, #16
 8000ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ef4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ef8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000efa:	2304      	movs	r3, #4
 8000efc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f02:	2302      	movs	r3, #2
 8000f04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fbf4 	bl	80026f8 <HAL_RCC_OscConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f16:	f000 f81f 	bl	8000f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1a:	230f      	movs	r3, #15
 8000f1c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	2102      	movs	r1, #2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 f894 	bl	8002064 <HAL_RCC_ClockConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f42:	f000 f809 	bl	8000f58 <Error_Handler>
  }
}
 8000f46:	bf00      	nop
 8000f48:	3750      	adds	r7, #80	; 0x50
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40007000 	.word	0x40007000

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <Error_Handler+0x8>
	...

08000f64 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000f6a:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <MX_SPI1_Init+0x68>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f6e:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000f70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000f98:	2208      	movs	r2, #8
 8000f9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000fb0:	220a      	movs	r2, #10
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000fb6:	f001 fe3d 	bl	8002c34 <HAL_SPI_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fc0:	f7ff ffca 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2000002c 	.word	0x2000002c
 8000fcc:	40013000 	.word	0x40013000

08000fd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a30      	ldr	r2, [pc, #192]	; (80010b0 <HAL_SPI_MspInit+0xe0>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d15a      	bne.n	80010a8 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <HAL_SPI_MspInit+0xe4>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a2e      	ldr	r2, [pc, #184]	; (80010b4 <HAL_SPI_MspInit+0xe4>)
 8000ffc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <HAL_SPI_MspInit+0xe4>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <HAL_SPI_MspInit+0xe4>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a27      	ldr	r2, [pc, #156]	; (80010b4 <HAL_SPI_MspInit+0xe4>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <HAL_SPI_MspInit+0xe4>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800102a:	23e0      	movs	r3, #224	; 0xe0
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800103a:	2305      	movs	r3, #5
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	481c      	ldr	r0, [pc, #112]	; (80010b8 <HAL_SPI_MspInit+0xe8>)
 8001046:	f000 fe5f 	bl	8001d08 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <HAL_SPI_MspInit+0xec>)
 800104c:	4a1c      	ldr	r2, [pc, #112]	; (80010c0 <HAL_SPI_MspInit+0xf0>)
 800104e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001050:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <HAL_SPI_MspInit+0xec>)
 8001052:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001056:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_SPI_MspInit+0xec>)
 800105a:	2240      	movs	r2, #64	; 0x40
 800105c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800105e:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_SPI_MspInit+0xec>)
 8001060:	2200      	movs	r2, #0
 8001062:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001064:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_SPI_MspInit+0xec>)
 8001066:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800106a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <HAL_SPI_MspInit+0xec>)
 800106e:	2200      	movs	r2, #0
 8001070:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_SPI_MspInit+0xec>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <HAL_SPI_MspInit+0xec>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_SPI_MspInit+0xec>)
 8001080:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001084:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_SPI_MspInit+0xec>)
 8001088:	2200      	movs	r2, #0
 800108a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800108c:	480b      	ldr	r0, [pc, #44]	; (80010bc <HAL_SPI_MspInit+0xec>)
 800108e:	f000 facb 	bl	8001628 <HAL_DMA_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001098:	f7ff ff5e 	bl	8000f58 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a07      	ldr	r2, [pc, #28]	; (80010bc <HAL_SPI_MspInit+0xec>)
 80010a0:	649a      	str	r2, [r3, #72]	; 0x48
 80010a2:	4a06      	ldr	r2, [pc, #24]	; (80010bc <HAL_SPI_MspInit+0xec>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010a8:	bf00      	nop
 80010aa:	3728      	adds	r7, #40	; 0x28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40013000 	.word	0x40013000
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020000 	.word	0x40020000
 80010bc:	20000084 	.word	0x20000084
 80010c0:	40026458 	.word	0x40026458

080010c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <HAL_MspInit+0x4c>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <HAL_MspInit+0x4c>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <HAL_MspInit+0x4c>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_MspInit+0x4c>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	4a08      	ldr	r2, [pc, #32]	; (8001110 <HAL_MspInit+0x4c>)
 80010f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f4:	6413      	str	r3, [r2, #64]	; 0x40
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_MspInit+0x4c>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001102:	2007      	movs	r0, #7
 8001104:	f000 fa4e 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40023800 	.word	0x40023800

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <NMI_Handler+0x4>

0800111a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <MemManage_Handler+0x4>

08001126 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <UsageFault_Handler+0x4>

08001132 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001160:	f000 f90c 	bl	800137c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}

08001168 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <DMA2_Stream3_IRQHandler+0x10>)
 800116e:	f000 fb61 	bl	8001834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000084 	.word	0x20000084

0800117c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <SystemInit+0x20>)
 8001182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <SystemInit+0x20>)
 8001188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800118c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011a6:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <MX_USART2_UART_Init+0x50>)
 80011a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011c6:	220c      	movs	r2, #12
 80011c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011d8:	f002 f908 	bl	80033ec <HAL_UART_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011e2:	f7ff feb9 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200000e4 	.word	0x200000e4
 80011f0:	40004400 	.word	0x40004400

080011f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a19      	ldr	r2, [pc, #100]	; (8001278 <HAL_UART_MspInit+0x84>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d12b      	bne.n	800126e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <HAL_UART_MspInit+0x88>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a17      	ldr	r2, [pc, #92]	; (800127c <HAL_UART_MspInit+0x88>)
 8001220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_UART_MspInit+0x88>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <HAL_UART_MspInit+0x88>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a10      	ldr	r2, [pc, #64]	; (800127c <HAL_UART_MspInit+0x88>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_UART_MspInit+0x88>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800124e:	230c      	movs	r3, #12
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800125e:	2307      	movs	r3, #7
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <HAL_UART_MspInit+0x8c>)
 800126a:	f000 fd4d 	bl	8001d08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800126e:	bf00      	nop
 8001270:	3728      	adds	r7, #40	; 0x28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40004400 	.word	0x40004400
 800127c:	40023800 	.word	0x40023800
 8001280:	40020000 	.word	0x40020000

08001284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001284:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001288:	480d      	ldr	r0, [pc, #52]	; (80012c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800128a:	490e      	ldr	r1, [pc, #56]	; (80012c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800128c:	4a0e      	ldr	r2, [pc, #56]	; (80012c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001290:	e002      	b.n	8001298 <LoopCopyDataInit>

08001292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001296:	3304      	adds	r3, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800129c:	d3f9      	bcc.n	8001292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129e:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012a0:	4c0b      	ldr	r4, [pc, #44]	; (80012d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a4:	e001      	b.n	80012aa <LoopFillZerobss>

080012a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a8:	3204      	adds	r2, #4

080012aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ac:	d3fb      	bcc.n	80012a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ae:	f7ff ff65 	bl	800117c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012b2:	f002 fb65 	bl	8003980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012b6:	f7ff fd81 	bl	8000dbc <main>
  bx  lr    
 80012ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012c8:	08004600 	.word	0x08004600
  ldr r2, =_sbss
 80012cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012d0:	2000012c 	.word	0x2000012c

080012d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC_IRQHandler>
	...

080012d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <HAL_Init+0x40>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0d      	ldr	r2, [pc, #52]	; (8001318 <HAL_Init+0x40>)
 80012e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_Init+0x40>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <HAL_Init+0x40>)
 80012ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_Init+0x40>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_Init+0x40>)
 80012fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001300:	2003      	movs	r0, #3
 8001302:	f000 f94f 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001306:	2000      	movs	r0, #0
 8001308:	f000 f808 	bl	800131c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800130c:	f7ff feda 	bl	80010c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023c00 	.word	0x40023c00

0800131c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_InitTick+0x54>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_InitTick+0x58>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001332:	fbb3 f3f1 	udiv	r3, r3, r1
 8001336:	fbb2 f3f3 	udiv	r3, r2, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f967 	bl	800160e <HAL_SYSTICK_Config>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e00e      	b.n	8001368 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b0f      	cmp	r3, #15
 800134e:	d80a      	bhi.n	8001366 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001350:	2200      	movs	r2, #0
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f000 f92f 	bl	80015ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800135c:	4a06      	ldr	r2, [pc, #24]	; (8001378 <HAL_InitTick+0x5c>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	e000      	b.n	8001368 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000000 	.word	0x20000000
 8001374:	20000008 	.word	0x20000008
 8001378:	20000004 	.word	0x20000004

0800137c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x20>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_IncTick+0x24>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4413      	add	r3, r2
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <HAL_IncTick+0x24>)
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000008 	.word	0x20000008
 80013a0:	20000128 	.word	0x20000128

080013a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return uwTick;
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <HAL_GetTick+0x14>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000128 	.word	0x20000128

080013bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c4:	f7ff ffee 	bl	80013a4 <HAL_GetTick>
 80013c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d4:	d005      	beq.n	80013e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_Delay+0x44>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4413      	add	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013e2:	bf00      	nop
 80013e4:	f7ff ffde 	bl	80013a4 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d8f7      	bhi.n	80013e4 <HAL_Delay+0x28>
  {
  }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000008 	.word	0x20000008

08001404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800142c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001436:	4a04      	ldr	r2, [pc, #16]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	60d3      	str	r3, [r2, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db0b      	blt.n	8001492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f003 021f 	and.w	r2, r3, #31
 8001480:	4907      	ldr	r1, [pc, #28]	; (80014a0 <__NVIC_EnableIRQ+0x38>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	2001      	movs	r0, #1
 800148a:	fa00 f202 	lsl.w	r2, r0, r2
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	; (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	; (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001570:	d301      	bcc.n	8001576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <SysTick_Config+0x40>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157e:	210f      	movs	r1, #15
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f7ff ff8e 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <SysTick_Config+0x40>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <SysTick_Config+0x40>)
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff29 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015cc:	f7ff ff3e 	bl	800144c <__NVIC_GetPriorityGrouping>
 80015d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f7ff ff8e 	bl	80014f8 <NVIC_EncodePriority>
 80015dc:	4602      	mov	r2, r0
 80015de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff5d 	bl	80014a4 <__NVIC_SetPriority>
}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff31 	bl	8001468 <__NVIC_EnableIRQ>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffa2 	bl	8001560 <SysTick_Config>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001634:	f7ff feb6 	bl	80013a4 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e099      	b.n	8001778 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2202      	movs	r2, #2
 8001648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001664:	e00f      	b.n	8001686 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001666:	f7ff fe9d 	bl	80013a4 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b05      	cmp	r3, #5
 8001672:	d908      	bls.n	8001686 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2220      	movs	r2, #32
 8001678:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2203      	movs	r2, #3
 800167e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e078      	b.n	8001778 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1e8      	bne.n	8001666 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	4b38      	ldr	r3, [pc, #224]	; (8001780 <HAL_DMA_Init+0x158>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d107      	bne.n	80016f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e8:	4313      	orrs	r3, r2
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f023 0307 	bic.w	r3, r3, #7
 8001706:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	4313      	orrs	r3, r2
 8001710:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	2b04      	cmp	r3, #4
 8001718:	d117      	bne.n	800174a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	4313      	orrs	r3, r2
 8001722:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00e      	beq.n	800174a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 fa6f 	bl	8001c10 <DMA_CheckFifoParam>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2240      	movs	r2, #64	; 0x40
 800173c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001746:	2301      	movs	r3, #1
 8001748:	e016      	b.n	8001778 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 fa26 	bl	8001ba4 <DMA_CalcBaseAndBitshift>
 8001758:	4603      	mov	r3, r0
 800175a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001760:	223f      	movs	r2, #63	; 0x3f
 8001762:	409a      	lsls	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	f010803f 	.word	0xf010803f

08001784 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d101      	bne.n	80017aa <HAL_DMA_Start_IT+0x26>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e040      	b.n	800182c <HAL_DMA_Start_IT+0xa8>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d12f      	bne.n	800181e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2202      	movs	r2, #2
 80017c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 f9b8 	bl	8001b48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017dc:	223f      	movs	r2, #63	; 0x3f
 80017de:	409a      	lsls	r2, r3
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0216 	orr.w	r2, r2, #22
 80017f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d007      	beq.n	800180c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 0208 	orr.w	r2, r2, #8
 800180a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0201 	orr.w	r2, r2, #1
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	e005      	b.n	800182a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001826:	2302      	movs	r3, #2
 8001828:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800182a:	7dfb      	ldrb	r3, [r7, #23]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001840:	4b8e      	ldr	r3, [pc, #568]	; (8001a7c <HAL_DMA_IRQHandler+0x248>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a8e      	ldr	r2, [pc, #568]	; (8001a80 <HAL_DMA_IRQHandler+0x24c>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	0a9b      	lsrs	r3, r3, #10
 800184c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185e:	2208      	movs	r2, #8
 8001860:	409a      	lsls	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d01a      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d013      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0204 	bic.w	r2, r2, #4
 8001886:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188c:	2208      	movs	r2, #8
 800188e:	409a      	lsls	r2, r3
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001898:	f043 0201 	orr.w	r2, r3, #1
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a4:	2201      	movs	r2, #1
 80018a6:	409a      	lsls	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d012      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00b      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c2:	2201      	movs	r2, #1
 80018c4:	409a      	lsls	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ce:	f043 0202 	orr.w	r2, r3, #2
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018da:	2204      	movs	r2, #4
 80018dc:	409a      	lsls	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d012      	beq.n	800190c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00b      	beq.n	800190c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f8:	2204      	movs	r2, #4
 80018fa:	409a      	lsls	r2, r3
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001904:	f043 0204 	orr.w	r2, r3, #4
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001910:	2210      	movs	r2, #16
 8001912:	409a      	lsls	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d043      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d03c      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192e:	2210      	movs	r2, #16
 8001930:	409a      	lsls	r2, r3
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d018      	beq.n	8001976 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d108      	bne.n	8001964 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	2b00      	cmp	r3, #0
 8001958:	d024      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	4798      	blx	r3
 8001962:	e01f      	b.n	80019a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001968:	2b00      	cmp	r3, #0
 800196a:	d01b      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	4798      	blx	r3
 8001974:	e016      	b.n	80019a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001980:	2b00      	cmp	r3, #0
 8001982:	d107      	bne.n	8001994 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0208 	bic.w	r2, r2, #8
 8001992:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	2220      	movs	r2, #32
 80019aa:	409a      	lsls	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 808f 	beq.w	8001ad4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0310 	and.w	r3, r3, #16
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 8087 	beq.w	8001ad4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ca:	2220      	movs	r2, #32
 80019cc:	409a      	lsls	r2, r3
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b05      	cmp	r3, #5
 80019dc:	d136      	bne.n	8001a4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0216 	bic.w	r2, r2, #22
 80019ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	695a      	ldr	r2, [r3, #20]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d103      	bne.n	8001a0e <HAL_DMA_IRQHandler+0x1da>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d007      	beq.n	8001a1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0208 	bic.w	r2, r2, #8
 8001a1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a22:	223f      	movs	r2, #63	; 0x3f
 8001a24:	409a      	lsls	r2, r3
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d07e      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	4798      	blx	r3
        }
        return;
 8001a4a:	e079      	b.n	8001b40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01d      	beq.n	8001a96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10d      	bne.n	8001a84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d031      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	4798      	blx	r3
 8001a78:	e02c      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x2a0>
 8001a7a:	bf00      	nop
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d023      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	4798      	blx	r3
 8001a94:	e01e      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10f      	bne.n	8001ac4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0210 	bic.w	r2, r2, #16
 8001ab2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d032      	beq.n	8001b42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d022      	beq.n	8001b2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2205      	movs	r2, #5
 8001aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0201 	bic.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	3301      	adds	r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d307      	bcc.n	8001b1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f2      	bne.n	8001b00 <HAL_DMA_IRQHandler+0x2cc>
 8001b1a:	e000      	b.n	8001b1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d005      	beq.n	8001b42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	4798      	blx	r3
 8001b3e:	e000      	b.n	8001b42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b40:	bf00      	nop
    }
  }
}
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b40      	cmp	r3, #64	; 0x40
 8001b74:	d108      	bne.n	8001b88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b86:	e007      	b.n	8001b98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	60da      	str	r2, [r3, #12]
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	3b10      	subs	r3, #16
 8001bb4:	4a14      	ldr	r2, [pc, #80]	; (8001c08 <DMA_CalcBaseAndBitshift+0x64>)
 8001bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bbe:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <DMA_CalcBaseAndBitshift+0x68>)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d909      	bls.n	8001be6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bda:	f023 0303 	bic.w	r3, r3, #3
 8001bde:	1d1a      	adds	r2, r3, #4
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	659a      	str	r2, [r3, #88]	; 0x58
 8001be4:	e007      	b.n	8001bf6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bee:	f023 0303 	bic.w	r3, r3, #3
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	aaaaaaab 	.word	0xaaaaaaab
 8001c0c:	080045e8 	.word	0x080045e8

08001c10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d11f      	bne.n	8001c6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d856      	bhi.n	8001cde <DMA_CheckFifoParam+0xce>
 8001c30:	a201      	add	r2, pc, #4	; (adr r2, 8001c38 <DMA_CheckFifoParam+0x28>)
 8001c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c36:	bf00      	nop
 8001c38:	08001c49 	.word	0x08001c49
 8001c3c:	08001c5b 	.word	0x08001c5b
 8001c40:	08001c49 	.word	0x08001c49
 8001c44:	08001cdf 	.word	0x08001cdf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d046      	beq.n	8001ce2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c58:	e043      	b.n	8001ce2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c62:	d140      	bne.n	8001ce6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c68:	e03d      	b.n	8001ce6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c72:	d121      	bne.n	8001cb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d837      	bhi.n	8001cea <DMA_CheckFifoParam+0xda>
 8001c7a:	a201      	add	r2, pc, #4	; (adr r2, 8001c80 <DMA_CheckFifoParam+0x70>)
 8001c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c80:	08001c91 	.word	0x08001c91
 8001c84:	08001c97 	.word	0x08001c97
 8001c88:	08001c91 	.word	0x08001c91
 8001c8c:	08001ca9 	.word	0x08001ca9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
      break;
 8001c94:	e030      	b.n	8001cf8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d025      	beq.n	8001cee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ca6:	e022      	b.n	8001cee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cb0:	d11f      	bne.n	8001cf2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cb6:	e01c      	b.n	8001cf2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d903      	bls.n	8001cc6 <DMA_CheckFifoParam+0xb6>
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d003      	beq.n	8001ccc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cc4:	e018      	b.n	8001cf8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8001cca:	e015      	b.n	8001cf8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00e      	beq.n	8001cf6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
      break;
 8001cdc:	e00b      	b.n	8001cf6 <DMA_CheckFifoParam+0xe6>
      break;
 8001cde:	bf00      	nop
 8001ce0:	e00a      	b.n	8001cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ce2:	bf00      	nop
 8001ce4:	e008      	b.n	8001cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ce6:	bf00      	nop
 8001ce8:	e006      	b.n	8001cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cea:	bf00      	nop
 8001cec:	e004      	b.n	8001cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cee:	bf00      	nop
 8001cf0:	e002      	b.n	8001cf8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001cf2:	bf00      	nop
 8001cf4:	e000      	b.n	8001cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cf6:	bf00      	nop
    }
  } 
  
  return status; 
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop

08001d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	e165      	b.n	8001ff0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d24:	2201      	movs	r2, #1
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f040 8154 	bne.w	8001fea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d005      	beq.n	8001d5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d130      	bne.n	8001dbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	2203      	movs	r2, #3
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d90:	2201      	movs	r2, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 0201 	and.w	r2, r3, #1
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d017      	beq.n	8001df8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d123      	bne.n	8001e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	08da      	lsrs	r2, r3, #3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3208      	adds	r2, #8
 8001e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	220f      	movs	r2, #15
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	08da      	lsrs	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3208      	adds	r2, #8
 8001e46:	69b9      	ldr	r1, [r7, #24]
 8001e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2203      	movs	r2, #3
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0203 	and.w	r2, r3, #3
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80ae 	beq.w	8001fea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4b5d      	ldr	r3, [pc, #372]	; (8002008 <HAL_GPIO_Init+0x300>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	4a5c      	ldr	r2, [pc, #368]	; (8002008 <HAL_GPIO_Init+0x300>)
 8001e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9e:	4b5a      	ldr	r3, [pc, #360]	; (8002008 <HAL_GPIO_Init+0x300>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eaa:	4a58      	ldr	r2, [pc, #352]	; (800200c <HAL_GPIO_Init+0x304>)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4f      	ldr	r2, [pc, #316]	; (8002010 <HAL_GPIO_Init+0x308>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d025      	beq.n	8001f22 <HAL_GPIO_Init+0x21a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4e      	ldr	r2, [pc, #312]	; (8002014 <HAL_GPIO_Init+0x30c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d01f      	beq.n	8001f1e <HAL_GPIO_Init+0x216>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4d      	ldr	r2, [pc, #308]	; (8002018 <HAL_GPIO_Init+0x310>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d019      	beq.n	8001f1a <HAL_GPIO_Init+0x212>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4c      	ldr	r2, [pc, #304]	; (800201c <HAL_GPIO_Init+0x314>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_GPIO_Init+0x20e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4b      	ldr	r2, [pc, #300]	; (8002020 <HAL_GPIO_Init+0x318>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00d      	beq.n	8001f12 <HAL_GPIO_Init+0x20a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4a      	ldr	r2, [pc, #296]	; (8002024 <HAL_GPIO_Init+0x31c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d007      	beq.n	8001f0e <HAL_GPIO_Init+0x206>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a49      	ldr	r2, [pc, #292]	; (8002028 <HAL_GPIO_Init+0x320>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d101      	bne.n	8001f0a <HAL_GPIO_Init+0x202>
 8001f06:	2306      	movs	r3, #6
 8001f08:	e00c      	b.n	8001f24 <HAL_GPIO_Init+0x21c>
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	e00a      	b.n	8001f24 <HAL_GPIO_Init+0x21c>
 8001f0e:	2305      	movs	r3, #5
 8001f10:	e008      	b.n	8001f24 <HAL_GPIO_Init+0x21c>
 8001f12:	2304      	movs	r3, #4
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x21c>
 8001f16:	2303      	movs	r3, #3
 8001f18:	e004      	b.n	8001f24 <HAL_GPIO_Init+0x21c>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e002      	b.n	8001f24 <HAL_GPIO_Init+0x21c>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_GPIO_Init+0x21c>
 8001f22:	2300      	movs	r3, #0
 8001f24:	69fa      	ldr	r2, [r7, #28]
 8001f26:	f002 0203 	and.w	r2, r2, #3
 8001f2a:	0092      	lsls	r2, r2, #2
 8001f2c:	4093      	lsls	r3, r2
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f34:	4935      	ldr	r1, [pc, #212]	; (800200c <HAL_GPIO_Init+0x304>)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f42:	4b3a      	ldr	r3, [pc, #232]	; (800202c <HAL_GPIO_Init+0x324>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f66:	4a31      	ldr	r2, [pc, #196]	; (800202c <HAL_GPIO_Init+0x324>)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f6c:	4b2f      	ldr	r3, [pc, #188]	; (800202c <HAL_GPIO_Init+0x324>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f90:	4a26      	ldr	r2, [pc, #152]	; (800202c <HAL_GPIO_Init+0x324>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f96:	4b25      	ldr	r3, [pc, #148]	; (800202c <HAL_GPIO_Init+0x324>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fba:	4a1c      	ldr	r2, [pc, #112]	; (800202c <HAL_GPIO_Init+0x324>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	; (800202c <HAL_GPIO_Init+0x324>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe4:	4a11      	ldr	r2, [pc, #68]	; (800202c <HAL_GPIO_Init+0x324>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3301      	adds	r3, #1
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b0f      	cmp	r3, #15
 8001ff4:	f67f ae96 	bls.w	8001d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	40013800 	.word	0x40013800
 8002010:	40020000 	.word	0x40020000
 8002014:	40020400 	.word	0x40020400
 8002018:	40020800 	.word	0x40020800
 800201c:	40020c00 	.word	0x40020c00
 8002020:	40021000 	.word	0x40021000
 8002024:	40021400 	.word	0x40021400
 8002028:	40021800 	.word	0x40021800
 800202c:	40013c00 	.word	0x40013c00

08002030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	807b      	strh	r3, [r7, #2]
 800203c:	4613      	mov	r3, r2
 800203e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002040:	787b      	ldrb	r3, [r7, #1]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002046:	887a      	ldrh	r2, [r7, #2]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800204c:	e003      	b.n	8002056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800204e:	887b      	ldrh	r3, [r7, #2]
 8002050:	041a      	lsls	r2, r3, #16
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	619a      	str	r2, [r3, #24]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0cc      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002078:	4b68      	ldr	r3, [pc, #416]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d90c      	bls.n	80020a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002086:	4b65      	ldr	r3, [pc, #404]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	4b63      	ldr	r3, [pc, #396]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0b8      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d020      	beq.n	80020ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b8:	4b59      	ldr	r3, [pc, #356]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	4a58      	ldr	r2, [pc, #352]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d0:	4b53      	ldr	r3, [pc, #332]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a52      	ldr	r2, [pc, #328]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020dc:	4b50      	ldr	r3, [pc, #320]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	494d      	ldr	r1, [pc, #308]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d044      	beq.n	8002184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	4b47      	ldr	r3, [pc, #284]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d119      	bne.n	8002142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e07f      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d003      	beq.n	8002122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800211e:	2b03      	cmp	r3, #3
 8002120:	d107      	bne.n	8002132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002122:	4b3f      	ldr	r3, [pc, #252]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e06f      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002132:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e067      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002142:	4b37      	ldr	r3, [pc, #220]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f023 0203 	bic.w	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4934      	ldr	r1, [pc, #208]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	4313      	orrs	r3, r2
 8002152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002154:	f7ff f926 	bl	80013a4 <HAL_GetTick>
 8002158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215a:	e00a      	b.n	8002172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215c:	f7ff f922 	bl	80013a4 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	; 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e04f      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 020c 	and.w	r2, r3, #12
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	429a      	cmp	r2, r3
 8002182:	d1eb      	bne.n	800215c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002184:	4b25      	ldr	r3, [pc, #148]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d20c      	bcs.n	80021ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b22      	ldr	r3, [pc, #136]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	4b20      	ldr	r3, [pc, #128]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d001      	beq.n	80021ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e032      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4916      	ldr	r1, [pc, #88]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d009      	beq.n	80021ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	490e      	ldr	r1, [pc, #56]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ea:	f000 f855 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 80021ee:	4602      	mov	r2, r0
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	490a      	ldr	r1, [pc, #40]	; (8002224 <HAL_RCC_ClockConfig+0x1c0>)
 80021fc:	5ccb      	ldrb	r3, [r1, r3]
 80021fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002202:	4a09      	ldr	r2, [pc, #36]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 8002204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff f886 	bl	800131c <HAL_InitTick>

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023c00 	.word	0x40023c00
 8002220:	40023800 	.word	0x40023800
 8002224:	080045d0 	.word	0x080045d0
 8002228:	20000000 	.word	0x20000000
 800222c:	20000004 	.word	0x20000004

08002230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <HAL_RCC_GetHCLKFreq+0x14>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000000 	.word	0x20000000

08002248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800224c:	f7ff fff0 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 8002250:	4602      	mov	r2, r0
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	0a9b      	lsrs	r3, r3, #10
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	4903      	ldr	r1, [pc, #12]	; (800226c <HAL_RCC_GetPCLK1Freq+0x24>)
 800225e:	5ccb      	ldrb	r3, [r1, r3]
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002264:	4618      	mov	r0, r3
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40023800 	.word	0x40023800
 800226c:	080045e0 	.word	0x080045e0

08002270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002274:	f7ff ffdc 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 8002278:	4602      	mov	r2, r0
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	0b5b      	lsrs	r3, r3, #13
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4903      	ldr	r1, [pc, #12]	; (8002294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40023800 	.word	0x40023800
 8002294:	080045e0 	.word	0x080045e0

08002298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800229c:	b0ae      	sub	sp, #184	; 0xb8
 800229e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022be:	4bcb      	ldr	r3, [pc, #812]	; (80025ec <HAL_RCC_GetSysClockFreq+0x354>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b0c      	cmp	r3, #12
 80022c8:	f200 8206 	bhi.w	80026d8 <HAL_RCC_GetSysClockFreq+0x440>
 80022cc:	a201      	add	r2, pc, #4	; (adr r2, 80022d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80022ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d2:	bf00      	nop
 80022d4:	08002309 	.word	0x08002309
 80022d8:	080026d9 	.word	0x080026d9
 80022dc:	080026d9 	.word	0x080026d9
 80022e0:	080026d9 	.word	0x080026d9
 80022e4:	08002311 	.word	0x08002311
 80022e8:	080026d9 	.word	0x080026d9
 80022ec:	080026d9 	.word	0x080026d9
 80022f0:	080026d9 	.word	0x080026d9
 80022f4:	08002319 	.word	0x08002319
 80022f8:	080026d9 	.word	0x080026d9
 80022fc:	080026d9 	.word	0x080026d9
 8002300:	080026d9 	.word	0x080026d9
 8002304:	08002509 	.word	0x08002509
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002308:	4bb9      	ldr	r3, [pc, #740]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x358>)
 800230a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800230e:	e1e7      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002310:	4bb8      	ldr	r3, [pc, #736]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002312:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002316:	e1e3      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002318:	4bb4      	ldr	r3, [pc, #720]	; (80025ec <HAL_RCC_GetSysClockFreq+0x354>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002324:	4bb1      	ldr	r3, [pc, #708]	; (80025ec <HAL_RCC_GetSysClockFreq+0x354>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d071      	beq.n	8002414 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002330:	4bae      	ldr	r3, [pc, #696]	; (80025ec <HAL_RCC_GetSysClockFreq+0x354>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	099b      	lsrs	r3, r3, #6
 8002336:	2200      	movs	r2, #0
 8002338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800233c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002348:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800234c:	2300      	movs	r3, #0
 800234e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002352:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002356:	4622      	mov	r2, r4
 8002358:	462b      	mov	r3, r5
 800235a:	f04f 0000 	mov.w	r0, #0
 800235e:	f04f 0100 	mov.w	r1, #0
 8002362:	0159      	lsls	r1, r3, #5
 8002364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002368:	0150      	lsls	r0, r2, #5
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4621      	mov	r1, r4
 8002370:	1a51      	subs	r1, r2, r1
 8002372:	6439      	str	r1, [r7, #64]	; 0x40
 8002374:	4629      	mov	r1, r5
 8002376:	eb63 0301 	sbc.w	r3, r3, r1
 800237a:	647b      	str	r3, [r7, #68]	; 0x44
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002388:	4649      	mov	r1, r9
 800238a:	018b      	lsls	r3, r1, #6
 800238c:	4641      	mov	r1, r8
 800238e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002392:	4641      	mov	r1, r8
 8002394:	018a      	lsls	r2, r1, #6
 8002396:	4641      	mov	r1, r8
 8002398:	1a51      	subs	r1, r2, r1
 800239a:	63b9      	str	r1, [r7, #56]	; 0x38
 800239c:	4649      	mov	r1, r9
 800239e:	eb63 0301 	sbc.w	r3, r3, r1
 80023a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80023b0:	4649      	mov	r1, r9
 80023b2:	00cb      	lsls	r3, r1, #3
 80023b4:	4641      	mov	r1, r8
 80023b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023ba:	4641      	mov	r1, r8
 80023bc:	00ca      	lsls	r2, r1, #3
 80023be:	4610      	mov	r0, r2
 80023c0:	4619      	mov	r1, r3
 80023c2:	4603      	mov	r3, r0
 80023c4:	4622      	mov	r2, r4
 80023c6:	189b      	adds	r3, r3, r2
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
 80023ca:	462b      	mov	r3, r5
 80023cc:	460a      	mov	r2, r1
 80023ce:	eb42 0303 	adc.w	r3, r2, r3
 80023d2:	637b      	str	r3, [r7, #52]	; 0x34
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80023e0:	4629      	mov	r1, r5
 80023e2:	024b      	lsls	r3, r1, #9
 80023e4:	4621      	mov	r1, r4
 80023e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023ea:	4621      	mov	r1, r4
 80023ec:	024a      	lsls	r2, r1, #9
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023f6:	2200      	movs	r2, #0
 80023f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80023fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002400:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002404:	f7fd ff06 	bl	8000214 <__aeabi_uldivmod>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4613      	mov	r3, r2
 800240e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002412:	e067      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002414:	4b75      	ldr	r3, [pc, #468]	; (80025ec <HAL_RCC_GetSysClockFreq+0x354>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	099b      	lsrs	r3, r3, #6
 800241a:	2200      	movs	r2, #0
 800241c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002420:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002424:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800242c:	67bb      	str	r3, [r7, #120]	; 0x78
 800242e:	2300      	movs	r3, #0
 8002430:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002432:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002436:	4622      	mov	r2, r4
 8002438:	462b      	mov	r3, r5
 800243a:	f04f 0000 	mov.w	r0, #0
 800243e:	f04f 0100 	mov.w	r1, #0
 8002442:	0159      	lsls	r1, r3, #5
 8002444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002448:	0150      	lsls	r0, r2, #5
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4621      	mov	r1, r4
 8002450:	1a51      	subs	r1, r2, r1
 8002452:	62b9      	str	r1, [r7, #40]	; 0x28
 8002454:	4629      	mov	r1, r5
 8002456:	eb63 0301 	sbc.w	r3, r3, r1
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002468:	4649      	mov	r1, r9
 800246a:	018b      	lsls	r3, r1, #6
 800246c:	4641      	mov	r1, r8
 800246e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002472:	4641      	mov	r1, r8
 8002474:	018a      	lsls	r2, r1, #6
 8002476:	4641      	mov	r1, r8
 8002478:	ebb2 0a01 	subs.w	sl, r2, r1
 800247c:	4649      	mov	r1, r9
 800247e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800248e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002492:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002496:	4692      	mov	sl, r2
 8002498:	469b      	mov	fp, r3
 800249a:	4623      	mov	r3, r4
 800249c:	eb1a 0303 	adds.w	r3, sl, r3
 80024a0:	623b      	str	r3, [r7, #32]
 80024a2:	462b      	mov	r3, r5
 80024a4:	eb4b 0303 	adc.w	r3, fp, r3
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80024b6:	4629      	mov	r1, r5
 80024b8:	028b      	lsls	r3, r1, #10
 80024ba:	4621      	mov	r1, r4
 80024bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024c0:	4621      	mov	r1, r4
 80024c2:	028a      	lsls	r2, r1, #10
 80024c4:	4610      	mov	r0, r2
 80024c6:	4619      	mov	r1, r3
 80024c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024cc:	2200      	movs	r2, #0
 80024ce:	673b      	str	r3, [r7, #112]	; 0x70
 80024d0:	677a      	str	r2, [r7, #116]	; 0x74
 80024d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80024d6:	f7fd fe9d 	bl	8000214 <__aeabi_uldivmod>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4613      	mov	r3, r2
 80024e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024e4:	4b41      	ldr	r3, [pc, #260]	; (80025ec <HAL_RCC_GetSysClockFreq+0x354>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	0c1b      	lsrs	r3, r3, #16
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	3301      	adds	r3, #1
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80024f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002502:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002506:	e0eb      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002508:	4b38      	ldr	r3, [pc, #224]	; (80025ec <HAL_RCC_GetSysClockFreq+0x354>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002510:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002514:	4b35      	ldr	r3, [pc, #212]	; (80025ec <HAL_RCC_GetSysClockFreq+0x354>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d06b      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002520:	4b32      	ldr	r3, [pc, #200]	; (80025ec <HAL_RCC_GetSysClockFreq+0x354>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	099b      	lsrs	r3, r3, #6
 8002526:	2200      	movs	r2, #0
 8002528:	66bb      	str	r3, [r7, #104]	; 0x68
 800252a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800252c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800252e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002532:	663b      	str	r3, [r7, #96]	; 0x60
 8002534:	2300      	movs	r3, #0
 8002536:	667b      	str	r3, [r7, #100]	; 0x64
 8002538:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800253c:	4622      	mov	r2, r4
 800253e:	462b      	mov	r3, r5
 8002540:	f04f 0000 	mov.w	r0, #0
 8002544:	f04f 0100 	mov.w	r1, #0
 8002548:	0159      	lsls	r1, r3, #5
 800254a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800254e:	0150      	lsls	r0, r2, #5
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4621      	mov	r1, r4
 8002556:	1a51      	subs	r1, r2, r1
 8002558:	61b9      	str	r1, [r7, #24]
 800255a:	4629      	mov	r1, r5
 800255c:	eb63 0301 	sbc.w	r3, r3, r1
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800256e:	4659      	mov	r1, fp
 8002570:	018b      	lsls	r3, r1, #6
 8002572:	4651      	mov	r1, sl
 8002574:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002578:	4651      	mov	r1, sl
 800257a:	018a      	lsls	r2, r1, #6
 800257c:	4651      	mov	r1, sl
 800257e:	ebb2 0801 	subs.w	r8, r2, r1
 8002582:	4659      	mov	r1, fp
 8002584:	eb63 0901 	sbc.w	r9, r3, r1
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002594:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002598:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800259c:	4690      	mov	r8, r2
 800259e:	4699      	mov	r9, r3
 80025a0:	4623      	mov	r3, r4
 80025a2:	eb18 0303 	adds.w	r3, r8, r3
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	462b      	mov	r3, r5
 80025aa:	eb49 0303 	adc.w	r3, r9, r3
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80025bc:	4629      	mov	r1, r5
 80025be:	024b      	lsls	r3, r1, #9
 80025c0:	4621      	mov	r1, r4
 80025c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025c6:	4621      	mov	r1, r4
 80025c8:	024a      	lsls	r2, r1, #9
 80025ca:	4610      	mov	r0, r2
 80025cc:	4619      	mov	r1, r3
 80025ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025d2:	2200      	movs	r2, #0
 80025d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80025d6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80025d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80025dc:	f7fd fe1a 	bl	8000214 <__aeabi_uldivmod>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4613      	mov	r3, r2
 80025e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025ea:	e065      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0x420>
 80025ec:	40023800 	.word	0x40023800
 80025f0:	00f42400 	.word	0x00f42400
 80025f4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f8:	4b3d      	ldr	r3, [pc, #244]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	099b      	lsrs	r3, r3, #6
 80025fe:	2200      	movs	r2, #0
 8002600:	4618      	mov	r0, r3
 8002602:	4611      	mov	r1, r2
 8002604:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002608:	653b      	str	r3, [r7, #80]	; 0x50
 800260a:	2300      	movs	r3, #0
 800260c:	657b      	str	r3, [r7, #84]	; 0x54
 800260e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002612:	4642      	mov	r2, r8
 8002614:	464b      	mov	r3, r9
 8002616:	f04f 0000 	mov.w	r0, #0
 800261a:	f04f 0100 	mov.w	r1, #0
 800261e:	0159      	lsls	r1, r3, #5
 8002620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002624:	0150      	lsls	r0, r2, #5
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4641      	mov	r1, r8
 800262c:	1a51      	subs	r1, r2, r1
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	4649      	mov	r1, r9
 8002632:	eb63 0301 	sbc.w	r3, r3, r1
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	f04f 0300 	mov.w	r3, #0
 8002640:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002644:	4659      	mov	r1, fp
 8002646:	018b      	lsls	r3, r1, #6
 8002648:	4651      	mov	r1, sl
 800264a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800264e:	4651      	mov	r1, sl
 8002650:	018a      	lsls	r2, r1, #6
 8002652:	4651      	mov	r1, sl
 8002654:	1a54      	subs	r4, r2, r1
 8002656:	4659      	mov	r1, fp
 8002658:	eb63 0501 	sbc.w	r5, r3, r1
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	00eb      	lsls	r3, r5, #3
 8002666:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800266a:	00e2      	lsls	r2, r4, #3
 800266c:	4614      	mov	r4, r2
 800266e:	461d      	mov	r5, r3
 8002670:	4643      	mov	r3, r8
 8002672:	18e3      	adds	r3, r4, r3
 8002674:	603b      	str	r3, [r7, #0]
 8002676:	464b      	mov	r3, r9
 8002678:	eb45 0303 	adc.w	r3, r5, r3
 800267c:	607b      	str	r3, [r7, #4]
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	e9d7 4500 	ldrd	r4, r5, [r7]
 800268a:	4629      	mov	r1, r5
 800268c:	028b      	lsls	r3, r1, #10
 800268e:	4621      	mov	r1, r4
 8002690:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002694:	4621      	mov	r1, r4
 8002696:	028a      	lsls	r2, r1, #10
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026a0:	2200      	movs	r2, #0
 80026a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80026a4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80026a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026aa:	f7fd fdb3 	bl	8000214 <__aeabi_uldivmod>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4613      	mov	r3, r2
 80026b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026b8:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	0f1b      	lsrs	r3, r3, #28
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80026c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80026d6:	e003      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80026da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80026de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	37b8      	adds	r7, #184	; 0xb8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	00f42400 	.word	0x00f42400

080026f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e28d      	b.n	8002c26 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 8083 	beq.w	800281e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002718:	4b94      	ldr	r3, [pc, #592]	; (800296c <HAL_RCC_OscConfig+0x274>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 030c 	and.w	r3, r3, #12
 8002720:	2b04      	cmp	r3, #4
 8002722:	d019      	beq.n	8002758 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002724:	4b91      	ldr	r3, [pc, #580]	; (800296c <HAL_RCC_OscConfig+0x274>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800272c:	2b08      	cmp	r3, #8
 800272e:	d106      	bne.n	800273e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002730:	4b8e      	ldr	r3, [pc, #568]	; (800296c <HAL_RCC_OscConfig+0x274>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002738:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800273c:	d00c      	beq.n	8002758 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800273e:	4b8b      	ldr	r3, [pc, #556]	; (800296c <HAL_RCC_OscConfig+0x274>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002746:	2b0c      	cmp	r3, #12
 8002748:	d112      	bne.n	8002770 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800274a:	4b88      	ldr	r3, [pc, #544]	; (800296c <HAL_RCC_OscConfig+0x274>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002756:	d10b      	bne.n	8002770 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002758:	4b84      	ldr	r3, [pc, #528]	; (800296c <HAL_RCC_OscConfig+0x274>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d05b      	beq.n	800281c <HAL_RCC_OscConfig+0x124>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d157      	bne.n	800281c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e25a      	b.n	8002c26 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002778:	d106      	bne.n	8002788 <HAL_RCC_OscConfig+0x90>
 800277a:	4b7c      	ldr	r3, [pc, #496]	; (800296c <HAL_RCC_OscConfig+0x274>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a7b      	ldr	r2, [pc, #492]	; (800296c <HAL_RCC_OscConfig+0x274>)
 8002780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e01d      	b.n	80027c4 <HAL_RCC_OscConfig+0xcc>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0xb4>
 8002792:	4b76      	ldr	r3, [pc, #472]	; (800296c <HAL_RCC_OscConfig+0x274>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a75      	ldr	r2, [pc, #468]	; (800296c <HAL_RCC_OscConfig+0x274>)
 8002798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b73      	ldr	r3, [pc, #460]	; (800296c <HAL_RCC_OscConfig+0x274>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a72      	ldr	r2, [pc, #456]	; (800296c <HAL_RCC_OscConfig+0x274>)
 80027a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	e00b      	b.n	80027c4 <HAL_RCC_OscConfig+0xcc>
 80027ac:	4b6f      	ldr	r3, [pc, #444]	; (800296c <HAL_RCC_OscConfig+0x274>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a6e      	ldr	r2, [pc, #440]	; (800296c <HAL_RCC_OscConfig+0x274>)
 80027b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	4b6c      	ldr	r3, [pc, #432]	; (800296c <HAL_RCC_OscConfig+0x274>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a6b      	ldr	r2, [pc, #428]	; (800296c <HAL_RCC_OscConfig+0x274>)
 80027be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d013      	beq.n	80027f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe fdea 	bl	80013a4 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d4:	f7fe fde6 	bl	80013a4 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	; 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e21f      	b.n	8002c26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	4b61      	ldr	r3, [pc, #388]	; (800296c <HAL_RCC_OscConfig+0x274>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0xdc>
 80027f2:	e014      	b.n	800281e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe fdd6 	bl	80013a4 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027fc:	f7fe fdd2 	bl	80013a4 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	; 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e20b      	b.n	8002c26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280e:	4b57      	ldr	r3, [pc, #348]	; (800296c <HAL_RCC_OscConfig+0x274>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x104>
 800281a:	e000      	b.n	800281e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d06f      	beq.n	800290a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800282a:	4b50      	ldr	r3, [pc, #320]	; (800296c <HAL_RCC_OscConfig+0x274>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b00      	cmp	r3, #0
 8002834:	d017      	beq.n	8002866 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002836:	4b4d      	ldr	r3, [pc, #308]	; (800296c <HAL_RCC_OscConfig+0x274>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800283e:	2b08      	cmp	r3, #8
 8002840:	d105      	bne.n	800284e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002842:	4b4a      	ldr	r3, [pc, #296]	; (800296c <HAL_RCC_OscConfig+0x274>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800284e:	4b47      	ldr	r3, [pc, #284]	; (800296c <HAL_RCC_OscConfig+0x274>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002856:	2b0c      	cmp	r3, #12
 8002858:	d11c      	bne.n	8002894 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800285a:	4b44      	ldr	r3, [pc, #272]	; (800296c <HAL_RCC_OscConfig+0x274>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d116      	bne.n	8002894 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002866:	4b41      	ldr	r3, [pc, #260]	; (800296c <HAL_RCC_OscConfig+0x274>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <HAL_RCC_OscConfig+0x186>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d001      	beq.n	800287e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e1d3      	b.n	8002c26 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287e:	4b3b      	ldr	r3, [pc, #236]	; (800296c <HAL_RCC_OscConfig+0x274>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4937      	ldr	r1, [pc, #220]	; (800296c <HAL_RCC_OscConfig+0x274>)
 800288e:	4313      	orrs	r3, r2
 8002890:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002892:	e03a      	b.n	800290a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d020      	beq.n	80028de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800289c:	4b34      	ldr	r3, [pc, #208]	; (8002970 <HAL_RCC_OscConfig+0x278>)
 800289e:	2201      	movs	r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a2:	f7fe fd7f 	bl	80013a4 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028aa:	f7fe fd7b 	bl	80013a4 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e1b4      	b.n	8002c26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028bc:	4b2b      	ldr	r3, [pc, #172]	; (800296c <HAL_RCC_OscConfig+0x274>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c8:	4b28      	ldr	r3, [pc, #160]	; (800296c <HAL_RCC_OscConfig+0x274>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4925      	ldr	r1, [pc, #148]	; (800296c <HAL_RCC_OscConfig+0x274>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	600b      	str	r3, [r1, #0]
 80028dc:	e015      	b.n	800290a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028de:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_OscConfig+0x278>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7fe fd5e 	bl	80013a4 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ec:	f7fe fd5a 	bl	80013a4 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e193      	b.n	8002c26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	4b1b      	ldr	r3, [pc, #108]	; (800296c <HAL_RCC_OscConfig+0x274>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d036      	beq.n	8002984 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d016      	beq.n	800294c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <HAL_RCC_OscConfig+0x27c>)
 8002920:	2201      	movs	r2, #1
 8002922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002924:	f7fe fd3e 	bl	80013a4 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800292c:	f7fe fd3a 	bl	80013a4 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e173      	b.n	8002c26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293e:	4b0b      	ldr	r3, [pc, #44]	; (800296c <HAL_RCC_OscConfig+0x274>)
 8002940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x234>
 800294a:	e01b      	b.n	8002984 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800294c:	4b09      	ldr	r3, [pc, #36]	; (8002974 <HAL_RCC_OscConfig+0x27c>)
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002952:	f7fe fd27 	bl	80013a4 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002958:	e00e      	b.n	8002978 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800295a:	f7fe fd23 	bl	80013a4 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d907      	bls.n	8002978 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e15c      	b.n	8002c26 <HAL_RCC_OscConfig+0x52e>
 800296c:	40023800 	.word	0x40023800
 8002970:	42470000 	.word	0x42470000
 8002974:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002978:	4b8a      	ldr	r3, [pc, #552]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 800297a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1ea      	bne.n	800295a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 8097 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002992:	2300      	movs	r3, #0
 8002994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002996:	4b83      	ldr	r3, [pc, #524]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10f      	bne.n	80029c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	4b7f      	ldr	r3, [pc, #508]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	4a7e      	ldr	r2, [pc, #504]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 80029ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b0:	6413      	str	r3, [r2, #64]	; 0x40
 80029b2:	4b7c      	ldr	r3, [pc, #496]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029be:	2301      	movs	r3, #1
 80029c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c2:	4b79      	ldr	r3, [pc, #484]	; (8002ba8 <HAL_RCC_OscConfig+0x4b0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d118      	bne.n	8002a00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ce:	4b76      	ldr	r3, [pc, #472]	; (8002ba8 <HAL_RCC_OscConfig+0x4b0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a75      	ldr	r2, [pc, #468]	; (8002ba8 <HAL_RCC_OscConfig+0x4b0>)
 80029d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029da:	f7fe fce3 	bl	80013a4 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e2:	f7fe fcdf 	bl	80013a4 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e118      	b.n	8002c26 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	4b6c      	ldr	r3, [pc, #432]	; (8002ba8 <HAL_RCC_OscConfig+0x4b0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d106      	bne.n	8002a16 <HAL_RCC_OscConfig+0x31e>
 8002a08:	4b66      	ldr	r3, [pc, #408]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0c:	4a65      	ldr	r2, [pc, #404]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6713      	str	r3, [r2, #112]	; 0x70
 8002a14:	e01c      	b.n	8002a50 <HAL_RCC_OscConfig+0x358>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b05      	cmp	r3, #5
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x340>
 8002a1e:	4b61      	ldr	r3, [pc, #388]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a22:	4a60      	ldr	r2, [pc, #384]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 8002a24:	f043 0304 	orr.w	r3, r3, #4
 8002a28:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2a:	4b5e      	ldr	r3, [pc, #376]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	4a5d      	ldr	r2, [pc, #372]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6713      	str	r3, [r2, #112]	; 0x70
 8002a36:	e00b      	b.n	8002a50 <HAL_RCC_OscConfig+0x358>
 8002a38:	4b5a      	ldr	r3, [pc, #360]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	4a59      	ldr	r2, [pc, #356]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 8002a3e:	f023 0301 	bic.w	r3, r3, #1
 8002a42:	6713      	str	r3, [r2, #112]	; 0x70
 8002a44:	4b57      	ldr	r3, [pc, #348]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a48:	4a56      	ldr	r2, [pc, #344]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 8002a4a:	f023 0304 	bic.w	r3, r3, #4
 8002a4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d015      	beq.n	8002a84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a58:	f7fe fca4 	bl	80013a4 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a60:	f7fe fca0 	bl	80013a4 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e0d7      	b.n	8002c26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a76:	4b4b      	ldr	r3, [pc, #300]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0ee      	beq.n	8002a60 <HAL_RCC_OscConfig+0x368>
 8002a82:	e014      	b.n	8002aae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7fe fc8e 	bl	80013a4 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a8c:	f7fe fc8a 	bl	80013a4 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e0c1      	b.n	8002c26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa2:	4b40      	ldr	r3, [pc, #256]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1ee      	bne.n	8002a8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aae:	7dfb      	ldrb	r3, [r7, #23]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d105      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab4:	4b3b      	ldr	r3, [pc, #236]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	4a3a      	ldr	r2, [pc, #232]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 8002aba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002abe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80ad 	beq.w	8002c24 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002aca:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d060      	beq.n	8002b98 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d145      	bne.n	8002b6a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ade:	4b33      	ldr	r3, [pc, #204]	; (8002bac <HAL_RCC_OscConfig+0x4b4>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fc5e 	bl	80013a4 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aec:	f7fe fc5a 	bl	80013a4 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e093      	b.n	8002c26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afe:	4b29      	ldr	r3, [pc, #164]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69da      	ldr	r2, [r3, #28]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	019b      	lsls	r3, r3, #6
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b20:	085b      	lsrs	r3, r3, #1
 8002b22:	3b01      	subs	r3, #1
 8002b24:	041b      	lsls	r3, r3, #16
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	061b      	lsls	r3, r3, #24
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	071b      	lsls	r3, r3, #28
 8002b36:	491b      	ldr	r1, [pc, #108]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_RCC_OscConfig+0x4b4>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b42:	f7fe fc2f 	bl	80013a4 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4a:	f7fe fc2b 	bl	80013a4 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e064      	b.n	8002c26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x452>
 8002b68:	e05c      	b.n	8002c24 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	4b10      	ldr	r3, [pc, #64]	; (8002bac <HAL_RCC_OscConfig+0x4b4>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe fc18 	bl	80013a4 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe fc14 	bl	80013a4 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e04d      	b.n	8002c26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_RCC_OscConfig+0x4ac>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x480>
 8002b96:	e045      	b.n	8002c24 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e040      	b.n	8002c26 <HAL_RCC_OscConfig+0x52e>
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bb0:	4b1f      	ldr	r3, [pc, #124]	; (8002c30 <HAL_RCC_OscConfig+0x538>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d030      	beq.n	8002c20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d129      	bne.n	8002c20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d122      	bne.n	8002c20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002be0:	4013      	ands	r3, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002be6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d119      	bne.n	8002c20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	085b      	lsrs	r3, r3, #1
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d10f      	bne.n	8002c20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d107      	bne.n	8002c20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800

08002c34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e07b      	b.n	8002d3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d108      	bne.n	8002c60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c56:	d009      	beq.n	8002c6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	61da      	str	r2, [r3, #28]
 8002c5e:	e005      	b.n	8002c6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fe f9a2 	bl	8000fd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ca2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf0:	ea42 0103 	orr.w	r1, r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	0c1b      	lsrs	r3, r3, #16
 8002d0a:	f003 0104 	and.w	r1, r3, #4
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	f003 0210 	and.w	r2, r3, #16
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	69da      	ldr	r2, [r3, #28]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b088      	sub	sp, #32
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	603b      	str	r3, [r7, #0]
 8002d52:	4613      	mov	r3, r2
 8002d54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_SPI_Transmit+0x22>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e126      	b.n	8002fb6 <HAL_SPI_Transmit+0x270>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d70:	f7fe fb18 	bl	80013a4 <HAL_GetTick>
 8002d74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d002      	beq.n	8002d8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d86:	2302      	movs	r3, #2
 8002d88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d8a:	e10b      	b.n	8002fa4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_SPI_Transmit+0x52>
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d102      	bne.n	8002d9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d9c:	e102      	b.n	8002fa4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2203      	movs	r2, #3
 8002da2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	88fa      	ldrh	r2, [r7, #6]
 8002db6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	88fa      	ldrh	r2, [r7, #6]
 8002dbc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de4:	d10f      	bne.n	8002e06 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e10:	2b40      	cmp	r3, #64	; 0x40
 8002e12:	d007      	beq.n	8002e24 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e2c:	d14b      	bne.n	8002ec6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_SPI_Transmit+0xf6>
 8002e36:	8afb      	ldrh	r3, [r7, #22]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d13e      	bne.n	8002eba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	881a      	ldrh	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	1c9a      	adds	r2, r3, #2
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e60:	e02b      	b.n	8002eba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d112      	bne.n	8002e96 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	881a      	ldrh	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	1c9a      	adds	r2, r3, #2
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e94:	e011      	b.n	8002eba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e96:	f7fe fa85 	bl	80013a4 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d803      	bhi.n	8002eae <HAL_SPI_Transmit+0x168>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d102      	bne.n	8002eb4 <HAL_SPI_Transmit+0x16e>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002eb8:	e074      	b.n	8002fa4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1ce      	bne.n	8002e62 <HAL_SPI_Transmit+0x11c>
 8002ec4:	e04c      	b.n	8002f60 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_SPI_Transmit+0x18e>
 8002ece:	8afb      	ldrh	r3, [r7, #22]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d140      	bne.n	8002f56 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	330c      	adds	r3, #12
 8002ede:	7812      	ldrb	r2, [r2, #0]
 8002ee0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002efa:	e02c      	b.n	8002f56 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d113      	bne.n	8002f32 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	330c      	adds	r3, #12
 8002f14:	7812      	ldrb	r2, [r2, #0]
 8002f16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f30:	e011      	b.n	8002f56 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f32:	f7fe fa37 	bl	80013a4 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d803      	bhi.n	8002f4a <HAL_SPI_Transmit+0x204>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d102      	bne.n	8002f50 <HAL_SPI_Transmit+0x20a>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d102      	bne.n	8002f56 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f54:	e026      	b.n	8002fa4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1cd      	bne.n	8002efc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	6839      	ldr	r1, [r7, #0]
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 f9ff 	bl	8003368 <SPI_EndRxTxTransaction>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2220      	movs	r2, #32
 8002f74:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10a      	bne.n	8002f94 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	77fb      	strb	r3, [r7, #31]
 8002fa0:	e000      	b.n	8002fa4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002fa2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3720      	adds	r7, #32
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_SPI_Transmit_DMA+0x20>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e09b      	b.n	8003118 <HAL_SPI_Transmit_DMA+0x158>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d002      	beq.n	8002ffa <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ff8:	e089      	b.n	800310e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_SPI_Transmit_DMA+0x46>
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d102      	bne.n	800300c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	75fb      	strb	r3, [r7, #23]
    goto error;
 800300a:	e080      	b.n	800310e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2203      	movs	r2, #3
 8003010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	88fa      	ldrh	r2, [r7, #6]
 8003024:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	88fa      	ldrh	r2, [r7, #6]
 800302a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003052:	d10f      	bne.n	8003074 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003062:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003072:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003078:	4a29      	ldr	r2, [pc, #164]	; (8003120 <HAL_SPI_Transmit_DMA+0x160>)
 800307a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003080:	4a28      	ldr	r2, [pc, #160]	; (8003124 <HAL_SPI_Transmit_DMA+0x164>)
 8003082:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003088:	4a27      	ldr	r2, [pc, #156]	; (8003128 <HAL_SPI_Transmit_DMA+0x168>)
 800308a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003090:	2200      	movs	r2, #0
 8003092:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	4619      	mov	r1, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	330c      	adds	r3, #12
 80030a4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80030ac:	f7fe fb6a 	bl	8001784 <HAL_DMA_Start_IT>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00c      	beq.n	80030d0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ba:	f043 0210 	orr.w	r2, r3, #16
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80030ce:	e01e      	b.n	800310e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030da:	2b40      	cmp	r3, #64	; 0x40
 80030dc:	d007      	beq.n	80030ee <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ec:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0220 	orr.w	r2, r2, #32
 80030fc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0202 	orr.w	r2, r2, #2
 800310c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003116:	7dfb      	ldrb	r3, [r7, #23]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	080031fd 	.word	0x080031fd
 8003124:	08003155 	.word	0x08003155
 8003128:	08003219 	.word	0x08003219

0800312c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003160:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003162:	f7fe f91f 	bl	80013a4 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003176:	d03b      	beq.n	80031f0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0220 	bic.w	r2, r2, #32
 8003186:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0202 	bic.w	r2, r2, #2
 8003196:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	2164      	movs	r1, #100	; 0x64
 800319c:	6978      	ldr	r0, [r7, #20]
 800319e:	f000 f8e3 	bl	8003368 <SPI_EndRxTxTransaction>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ac:	f043 0220 	orr.w	r2, r3, #32
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10a      	bne.n	80031d2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031bc:	2300      	movs	r3, #0
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2200      	movs	r2, #0
 80031d6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80031e8:	6978      	ldr	r0, [r7, #20]
 80031ea:	f7ff ffa9 	bl	8003140 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80031ee:	e002      	b.n	80031f6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80031f0:	6978      	ldr	r0, [r7, #20]
 80031f2:	f7fd fb9b 	bl	800092c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f7ff ff8e 	bl	800312c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003210:	bf00      	nop
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0203 	bic.w	r2, r2, #3
 8003234:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323a:	f043 0210 	orr.w	r2, r3, #16
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f7ff ff78 	bl	8003140 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003250:	bf00      	nop
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003268:	f7fe f89c 	bl	80013a4 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	4413      	add	r3, r2
 8003276:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003278:	f7fe f894 	bl	80013a4 <HAL_GetTick>
 800327c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800327e:	4b39      	ldr	r3, [pc, #228]	; (8003364 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	015b      	lsls	r3, r3, #5
 8003284:	0d1b      	lsrs	r3, r3, #20
 8003286:	69fa      	ldr	r2, [r7, #28]
 8003288:	fb02 f303 	mul.w	r3, r2, r3
 800328c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800328e:	e054      	b.n	800333a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003296:	d050      	beq.n	800333a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003298:	f7fe f884 	bl	80013a4 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d902      	bls.n	80032ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d13d      	bne.n	800332a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032c6:	d111      	bne.n	80032ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032d0:	d004      	beq.n	80032dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032da:	d107      	bne.n	80032ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f4:	d10f      	bne.n	8003316 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003314:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e017      	b.n	800335a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	3b01      	subs	r3, #1
 8003338:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4013      	ands	r3, r2
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	429a      	cmp	r2, r3
 8003348:	bf0c      	ite	eq
 800334a:	2301      	moveq	r3, #1
 800334c:	2300      	movne	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	461a      	mov	r2, r3
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	429a      	cmp	r2, r3
 8003356:	d19b      	bne.n	8003290 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000000 	.word	0x20000000

08003368 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af02      	add	r7, sp, #8
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003374:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <SPI_EndRxTxTransaction+0x7c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1b      	ldr	r2, [pc, #108]	; (80033e8 <SPI_EndRxTxTransaction+0x80>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	0d5b      	lsrs	r3, r3, #21
 8003380:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003384:	fb02 f303 	mul.w	r3, r2, r3
 8003388:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003392:	d112      	bne.n	80033ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2200      	movs	r2, #0
 800339c:	2180      	movs	r1, #128	; 0x80
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f7ff ff5a 	bl	8003258 <SPI_WaitFlagStateUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d016      	beq.n	80033d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ae:	f043 0220 	orr.w	r2, r3, #32
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e00f      	b.n	80033da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d0:	2b80      	cmp	r3, #128	; 0x80
 80033d2:	d0f2      	beq.n	80033ba <SPI_EndRxTxTransaction+0x52>
 80033d4:	e000      	b.n	80033d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80033d6:	bf00      	nop
  }

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000000 	.word	0x20000000
 80033e8:	165e9f81 	.word	0x165e9f81

080033ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e03f      	b.n	800347e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fd feee 	bl	80011f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2224      	movs	r2, #36	; 0x24
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800342e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f829 	bl	8003488 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003444:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695a      	ldr	r2, [r3, #20]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003454:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003464:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800348c:	b0c0      	sub	sp, #256	; 0x100
 800348e:	af00      	add	r7, sp, #0
 8003490:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a4:	68d9      	ldr	r1, [r3, #12]
 80034a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	ea40 0301 	orr.w	r3, r0, r1
 80034b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	431a      	orrs	r2, r3
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034e0:	f021 010c 	bic.w	r1, r1, #12
 80034e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034ee:	430b      	orrs	r3, r1
 80034f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003502:	6999      	ldr	r1, [r3, #24]
 8003504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	ea40 0301 	orr.w	r3, r0, r1
 800350e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	4b8f      	ldr	r3, [pc, #572]	; (8003754 <UART_SetConfig+0x2cc>)
 8003518:	429a      	cmp	r2, r3
 800351a:	d005      	beq.n	8003528 <UART_SetConfig+0xa0>
 800351c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4b8d      	ldr	r3, [pc, #564]	; (8003758 <UART_SetConfig+0x2d0>)
 8003524:	429a      	cmp	r2, r3
 8003526:	d104      	bne.n	8003532 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003528:	f7fe fea2 	bl	8002270 <HAL_RCC_GetPCLK2Freq>
 800352c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003530:	e003      	b.n	800353a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003532:	f7fe fe89 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 8003536:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800353a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003544:	f040 810c 	bne.w	8003760 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800354c:	2200      	movs	r2, #0
 800354e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003552:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003556:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800355a:	4622      	mov	r2, r4
 800355c:	462b      	mov	r3, r5
 800355e:	1891      	adds	r1, r2, r2
 8003560:	65b9      	str	r1, [r7, #88]	; 0x58
 8003562:	415b      	adcs	r3, r3
 8003564:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003566:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800356a:	4621      	mov	r1, r4
 800356c:	eb12 0801 	adds.w	r8, r2, r1
 8003570:	4629      	mov	r1, r5
 8003572:	eb43 0901 	adc.w	r9, r3, r1
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003582:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003586:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800358a:	4690      	mov	r8, r2
 800358c:	4699      	mov	r9, r3
 800358e:	4623      	mov	r3, r4
 8003590:	eb18 0303 	adds.w	r3, r8, r3
 8003594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003598:	462b      	mov	r3, r5
 800359a:	eb49 0303 	adc.w	r3, r9, r3
 800359e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80035b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035b6:	460b      	mov	r3, r1
 80035b8:	18db      	adds	r3, r3, r3
 80035ba:	653b      	str	r3, [r7, #80]	; 0x50
 80035bc:	4613      	mov	r3, r2
 80035be:	eb42 0303 	adc.w	r3, r2, r3
 80035c2:	657b      	str	r3, [r7, #84]	; 0x54
 80035c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80035cc:	f7fc fe22 	bl	8000214 <__aeabi_uldivmod>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4b61      	ldr	r3, [pc, #388]	; (800375c <UART_SetConfig+0x2d4>)
 80035d6:	fba3 2302 	umull	r2, r3, r3, r2
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	011c      	lsls	r4, r3, #4
 80035de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035f0:	4642      	mov	r2, r8
 80035f2:	464b      	mov	r3, r9
 80035f4:	1891      	adds	r1, r2, r2
 80035f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80035f8:	415b      	adcs	r3, r3
 80035fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003600:	4641      	mov	r1, r8
 8003602:	eb12 0a01 	adds.w	sl, r2, r1
 8003606:	4649      	mov	r1, r9
 8003608:	eb43 0b01 	adc.w	fp, r3, r1
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003618:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800361c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003620:	4692      	mov	sl, r2
 8003622:	469b      	mov	fp, r3
 8003624:	4643      	mov	r3, r8
 8003626:	eb1a 0303 	adds.w	r3, sl, r3
 800362a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800362e:	464b      	mov	r3, r9
 8003630:	eb4b 0303 	adc.w	r3, fp, r3
 8003634:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003644:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003648:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800364c:	460b      	mov	r3, r1
 800364e:	18db      	adds	r3, r3, r3
 8003650:	643b      	str	r3, [r7, #64]	; 0x40
 8003652:	4613      	mov	r3, r2
 8003654:	eb42 0303 	adc.w	r3, r2, r3
 8003658:	647b      	str	r3, [r7, #68]	; 0x44
 800365a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800365e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003662:	f7fc fdd7 	bl	8000214 <__aeabi_uldivmod>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4611      	mov	r1, r2
 800366c:	4b3b      	ldr	r3, [pc, #236]	; (800375c <UART_SetConfig+0x2d4>)
 800366e:	fba3 2301 	umull	r2, r3, r3, r1
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	2264      	movs	r2, #100	; 0x64
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	1acb      	subs	r3, r1, r3
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003682:	4b36      	ldr	r3, [pc, #216]	; (800375c <UART_SetConfig+0x2d4>)
 8003684:	fba3 2302 	umull	r2, r3, r3, r2
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003690:	441c      	add	r4, r3
 8003692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003696:	2200      	movs	r2, #0
 8003698:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800369c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036a4:	4642      	mov	r2, r8
 80036a6:	464b      	mov	r3, r9
 80036a8:	1891      	adds	r1, r2, r2
 80036aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80036ac:	415b      	adcs	r3, r3
 80036ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036b4:	4641      	mov	r1, r8
 80036b6:	1851      	adds	r1, r2, r1
 80036b8:	6339      	str	r1, [r7, #48]	; 0x30
 80036ba:	4649      	mov	r1, r9
 80036bc:	414b      	adcs	r3, r1
 80036be:	637b      	str	r3, [r7, #52]	; 0x34
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80036cc:	4659      	mov	r1, fp
 80036ce:	00cb      	lsls	r3, r1, #3
 80036d0:	4651      	mov	r1, sl
 80036d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036d6:	4651      	mov	r1, sl
 80036d8:	00ca      	lsls	r2, r1, #3
 80036da:	4610      	mov	r0, r2
 80036dc:	4619      	mov	r1, r3
 80036de:	4603      	mov	r3, r0
 80036e0:	4642      	mov	r2, r8
 80036e2:	189b      	adds	r3, r3, r2
 80036e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036e8:	464b      	mov	r3, r9
 80036ea:	460a      	mov	r2, r1
 80036ec:	eb42 0303 	adc.w	r3, r2, r3
 80036f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003700:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003704:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003708:	460b      	mov	r3, r1
 800370a:	18db      	adds	r3, r3, r3
 800370c:	62bb      	str	r3, [r7, #40]	; 0x28
 800370e:	4613      	mov	r3, r2
 8003710:	eb42 0303 	adc.w	r3, r2, r3
 8003714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003716:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800371a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800371e:	f7fc fd79 	bl	8000214 <__aeabi_uldivmod>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4b0d      	ldr	r3, [pc, #52]	; (800375c <UART_SetConfig+0x2d4>)
 8003728:	fba3 1302 	umull	r1, r3, r3, r2
 800372c:	095b      	lsrs	r3, r3, #5
 800372e:	2164      	movs	r1, #100	; 0x64
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	3332      	adds	r3, #50	; 0x32
 800373a:	4a08      	ldr	r2, [pc, #32]	; (800375c <UART_SetConfig+0x2d4>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	095b      	lsrs	r3, r3, #5
 8003742:	f003 0207 	and.w	r2, r3, #7
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4422      	add	r2, r4
 800374e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003750:	e106      	b.n	8003960 <UART_SetConfig+0x4d8>
 8003752:	bf00      	nop
 8003754:	40011000 	.word	0x40011000
 8003758:	40011400 	.word	0x40011400
 800375c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003764:	2200      	movs	r2, #0
 8003766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800376a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800376e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003772:	4642      	mov	r2, r8
 8003774:	464b      	mov	r3, r9
 8003776:	1891      	adds	r1, r2, r2
 8003778:	6239      	str	r1, [r7, #32]
 800377a:	415b      	adcs	r3, r3
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
 800377e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003782:	4641      	mov	r1, r8
 8003784:	1854      	adds	r4, r2, r1
 8003786:	4649      	mov	r1, r9
 8003788:	eb43 0501 	adc.w	r5, r3, r1
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	00eb      	lsls	r3, r5, #3
 8003796:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800379a:	00e2      	lsls	r2, r4, #3
 800379c:	4614      	mov	r4, r2
 800379e:	461d      	mov	r5, r3
 80037a0:	4643      	mov	r3, r8
 80037a2:	18e3      	adds	r3, r4, r3
 80037a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037a8:	464b      	mov	r3, r9
 80037aa:	eb45 0303 	adc.w	r3, r5, r3
 80037ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037ce:	4629      	mov	r1, r5
 80037d0:	008b      	lsls	r3, r1, #2
 80037d2:	4621      	mov	r1, r4
 80037d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037d8:	4621      	mov	r1, r4
 80037da:	008a      	lsls	r2, r1, #2
 80037dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80037e0:	f7fc fd18 	bl	8000214 <__aeabi_uldivmod>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4b60      	ldr	r3, [pc, #384]	; (800396c <UART_SetConfig+0x4e4>)
 80037ea:	fba3 2302 	umull	r2, r3, r3, r2
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	011c      	lsls	r4, r3, #4
 80037f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037f6:	2200      	movs	r2, #0
 80037f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003800:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003804:	4642      	mov	r2, r8
 8003806:	464b      	mov	r3, r9
 8003808:	1891      	adds	r1, r2, r2
 800380a:	61b9      	str	r1, [r7, #24]
 800380c:	415b      	adcs	r3, r3
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003814:	4641      	mov	r1, r8
 8003816:	1851      	adds	r1, r2, r1
 8003818:	6139      	str	r1, [r7, #16]
 800381a:	4649      	mov	r1, r9
 800381c:	414b      	adcs	r3, r1
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800382c:	4659      	mov	r1, fp
 800382e:	00cb      	lsls	r3, r1, #3
 8003830:	4651      	mov	r1, sl
 8003832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003836:	4651      	mov	r1, sl
 8003838:	00ca      	lsls	r2, r1, #3
 800383a:	4610      	mov	r0, r2
 800383c:	4619      	mov	r1, r3
 800383e:	4603      	mov	r3, r0
 8003840:	4642      	mov	r2, r8
 8003842:	189b      	adds	r3, r3, r2
 8003844:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003848:	464b      	mov	r3, r9
 800384a:	460a      	mov	r2, r1
 800384c:	eb42 0303 	adc.w	r3, r2, r3
 8003850:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	67bb      	str	r3, [r7, #120]	; 0x78
 800385e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800386c:	4649      	mov	r1, r9
 800386e:	008b      	lsls	r3, r1, #2
 8003870:	4641      	mov	r1, r8
 8003872:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003876:	4641      	mov	r1, r8
 8003878:	008a      	lsls	r2, r1, #2
 800387a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800387e:	f7fc fcc9 	bl	8000214 <__aeabi_uldivmod>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4611      	mov	r1, r2
 8003888:	4b38      	ldr	r3, [pc, #224]	; (800396c <UART_SetConfig+0x4e4>)
 800388a:	fba3 2301 	umull	r2, r3, r3, r1
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	2264      	movs	r2, #100	; 0x64
 8003892:	fb02 f303 	mul.w	r3, r2, r3
 8003896:	1acb      	subs	r3, r1, r3
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	3332      	adds	r3, #50	; 0x32
 800389c:	4a33      	ldr	r2, [pc, #204]	; (800396c <UART_SetConfig+0x4e4>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a8:	441c      	add	r4, r3
 80038aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ae:	2200      	movs	r2, #0
 80038b0:	673b      	str	r3, [r7, #112]	; 0x70
 80038b2:	677a      	str	r2, [r7, #116]	; 0x74
 80038b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80038b8:	4642      	mov	r2, r8
 80038ba:	464b      	mov	r3, r9
 80038bc:	1891      	adds	r1, r2, r2
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	415b      	adcs	r3, r3
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038c8:	4641      	mov	r1, r8
 80038ca:	1851      	adds	r1, r2, r1
 80038cc:	6039      	str	r1, [r7, #0]
 80038ce:	4649      	mov	r1, r9
 80038d0:	414b      	adcs	r3, r1
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038e0:	4659      	mov	r1, fp
 80038e2:	00cb      	lsls	r3, r1, #3
 80038e4:	4651      	mov	r1, sl
 80038e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ea:	4651      	mov	r1, sl
 80038ec:	00ca      	lsls	r2, r1, #3
 80038ee:	4610      	mov	r0, r2
 80038f0:	4619      	mov	r1, r3
 80038f2:	4603      	mov	r3, r0
 80038f4:	4642      	mov	r2, r8
 80038f6:	189b      	adds	r3, r3, r2
 80038f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80038fa:	464b      	mov	r3, r9
 80038fc:	460a      	mov	r2, r1
 80038fe:	eb42 0303 	adc.w	r3, r2, r3
 8003902:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	663b      	str	r3, [r7, #96]	; 0x60
 800390e:	667a      	str	r2, [r7, #100]	; 0x64
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800391c:	4649      	mov	r1, r9
 800391e:	008b      	lsls	r3, r1, #2
 8003920:	4641      	mov	r1, r8
 8003922:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003926:	4641      	mov	r1, r8
 8003928:	008a      	lsls	r2, r1, #2
 800392a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800392e:	f7fc fc71 	bl	8000214 <__aeabi_uldivmod>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4b0d      	ldr	r3, [pc, #52]	; (800396c <UART_SetConfig+0x4e4>)
 8003938:	fba3 1302 	umull	r1, r3, r3, r2
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	2164      	movs	r1, #100	; 0x64
 8003940:	fb01 f303 	mul.w	r3, r1, r3
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	3332      	adds	r3, #50	; 0x32
 800394a:	4a08      	ldr	r2, [pc, #32]	; (800396c <UART_SetConfig+0x4e4>)
 800394c:	fba2 2303 	umull	r2, r3, r2, r3
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	f003 020f 	and.w	r2, r3, #15
 8003956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4422      	add	r2, r4
 800395e:	609a      	str	r2, [r3, #8]
}
 8003960:	bf00      	nop
 8003962:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003966:	46bd      	mov	sp, r7
 8003968:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800396c:	51eb851f 	.word	0x51eb851f

08003970 <memset>:
 8003970:	4402      	add	r2, r0
 8003972:	4603      	mov	r3, r0
 8003974:	4293      	cmp	r3, r2
 8003976:	d100      	bne.n	800397a <memset+0xa>
 8003978:	4770      	bx	lr
 800397a:	f803 1b01 	strb.w	r1, [r3], #1
 800397e:	e7f9      	b.n	8003974 <memset+0x4>

08003980 <__libc_init_array>:
 8003980:	b570      	push	{r4, r5, r6, lr}
 8003982:	4d0d      	ldr	r5, [pc, #52]	; (80039b8 <__libc_init_array+0x38>)
 8003984:	4c0d      	ldr	r4, [pc, #52]	; (80039bc <__libc_init_array+0x3c>)
 8003986:	1b64      	subs	r4, r4, r5
 8003988:	10a4      	asrs	r4, r4, #2
 800398a:	2600      	movs	r6, #0
 800398c:	42a6      	cmp	r6, r4
 800398e:	d109      	bne.n	80039a4 <__libc_init_array+0x24>
 8003990:	4d0b      	ldr	r5, [pc, #44]	; (80039c0 <__libc_init_array+0x40>)
 8003992:	4c0c      	ldr	r4, [pc, #48]	; (80039c4 <__libc_init_array+0x44>)
 8003994:	f000 f818 	bl	80039c8 <_init>
 8003998:	1b64      	subs	r4, r4, r5
 800399a:	10a4      	asrs	r4, r4, #2
 800399c:	2600      	movs	r6, #0
 800399e:	42a6      	cmp	r6, r4
 80039a0:	d105      	bne.n	80039ae <__libc_init_array+0x2e>
 80039a2:	bd70      	pop	{r4, r5, r6, pc}
 80039a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039a8:	4798      	blx	r3
 80039aa:	3601      	adds	r6, #1
 80039ac:	e7ee      	b.n	800398c <__libc_init_array+0xc>
 80039ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b2:	4798      	blx	r3
 80039b4:	3601      	adds	r6, #1
 80039b6:	e7f2      	b.n	800399e <__libc_init_array+0x1e>
 80039b8:	080045f8 	.word	0x080045f8
 80039bc:	080045f8 	.word	0x080045f8
 80039c0:	080045f8 	.word	0x080045f8
 80039c4:	080045fc 	.word	0x080045fc

080039c8 <_init>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	bf00      	nop
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr

080039d4 <_fini>:
 80039d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d6:	bf00      	nop
 80039d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039da:	bc08      	pop	{r3}
 80039dc:	469e      	mov	lr, r3
 80039de:	4770      	bx	lr
